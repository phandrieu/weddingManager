{% extends 'base.html.twig' %}

{% block title %}{{ wedding.id ? 'Modifier le mariage' : 'Ajouter un mariage' }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
{% endblock %}

{% block body %}
<div class="container-xl py-5">
    <div class="wizard-layout {{ wedding.id ? 'wizard-layout--full' : '' }}" id="weddingWizard" data-default-step="{{ initialWizardStep|default(0) }}">
    <section class="wizard-panel">
        {{ form_start(form, {'attr': {'id': 'weddingForm'}}) }}
        {% set currentPaymentOption = selectedPaymentOption ?: '' %}

        <header class="wizard-header">
            <div class="wizard-header__intro">
                <h2 class="wizard-panel__title">{{ wedding.id ? 'Modifier le mariage' : 'Ajouter un mariage' }}</h2>
                <p class="wizard-header__meta mb-0">
                    <span>
                        {% if wedding.marie or wedding.mariee %}
                            {{ wedding.marie ? wedding.marie.fullName : 'Marié à inviter' }} &amp; {{ wedding.mariee ? wedding.mariee.fullName : 'Mariée à inviter' }}
                        {% else %}
                            Identifiez le couple pour personnaliser la collaboration.
                        {% endif %}
                    </span>
                    {% if wedding.date %}
                        <span>&mdash; {{ wedding.date|date('d/m/Y') }}</span>
                    {% endif %}
                    {% if wedding.church %}
                        <span>&mdash; {{ wedding.church }}</span>
                    {% endif %}
                </p>
            </div>
            <div class="wizard-header__actions">
                <button type="submit" class="btn btn-primary btn-rounded btn-icon">
                    Enregistrer
                </button>
                {% if wedding.id %}
                    <button type="button" class="btn btn-outline-primary btn-rounded btn-icon" data-bs-toggle="modal" data-bs-target="#inviteModal">
                        <i class="bi bi-envelope-plus"></i>
                        Inviter
                    </button>
                {% endif %}
                <a href="{{ wedding.id ? path('app_wedding_view', {'id': wedding.id}) : path('app_wedding_index') }}" class="btn btn-outline-secondary btn-rounded">Annuler</a>
            </div>
        </header>

        {{ form_errors(form) }}

        <input type="hidden" name="payment_option" id="payment_option_input" value="{{ selectedPaymentOption }}">
        <input type="hidden" name="user_role" id="user_role_input" value="">

        <div class="wizard-stepper" id="weddingStepper">
            <button type="button" class="wizard-stepper__item active" data-step="0">
                Essentiels<br><small>Date &amp; lieu</small>
            </button>
            <button type="button" class="wizard-stepper__item" data-step="1">
                Couple<br><small>Coordonnées</small>
            </button>
            <button type="button" class="wizard-stepper__item" data-step="2">
                Intervenants<br><small>Musiciens &amp; paroisse</small>
            </button>
            <button type="button" class="wizard-stepper__item" data-step="3">
                Répertoire<br><small>Déroulé &amp; validations</small>
            </button>
            <button type="button" class="wizard-stepper__item" data-step="4">
                Suivi<br><small>Finances &amp; archive</small>
            </button>
        </div>

        <div class="wizard-steps">
            <div class="wizard-step active" data-step="0">
                <div class="form-grid">
                    <div class="form-card">
                        <div class="form-card__title">
                            <span>Calendrier</span>
                            <h3 class="mb-0">Renseignements essentiels</h3>
                        </div>
                        {% set isMesse = form.messe.vars.data ?? false %}
                        <div class="mb-4">
                            <span class="form-label-sm text-uppercase text-muted fw-semibold d-block mb-2">Format de la célébration</span>
                            <div class="d-flex flex-wrap gap-2">
                                <button
                                    type="button"
                                    class="btn btn-validation js-toggle-option {{ isMesse ? 'is-active' : '' }}"
                                    data-target="#{{ form.messe.vars.id }}"
                                    data-value="1"
                                >
                                    Messe
                                </button>
                                <button
                                    type="button"
                                    class="btn btn-validation js-toggle-option {{ isMesse ? '' : 'is-active' }}"
                                    data-target="#{{ form.messe.vars.id }}"
                                    data-value="0"
                                >
                                    Célébration
                                </button>
                            </div>
                            {{ form_widget(form.messe, {'attr': {'class': 'd-none js-toggle-input'}}) }}
                            {{ form_errors(form.messe) }}
                        </div>
                        <div class="row g-3">
                            <div class="col-sm-6">
                                {{ form_row(form.date, {
                                    'label_attr': {'class': 'form-label-sm'},
                                    'attr': {
                                        'class': (form.date.vars.attr.class|default('') ~ ' js-date')|trim,
                                        'placeholder': 'jj/mm/aaaa',
                                        'inputmode': 'numeric',
                                        'autocomplete': 'off'
                                    }
                                }) }}
                            </div>
                            <div class="col-sm-6">
                                {{ form_row(form.time, {
                                    'label_attr': {'class': 'form-label-sm'},
                                    'attr': {
                                        'class': (form.time.vars.attr.class|default('') ~ ' js-time')|trim,
                                        'placeholder': 'HH:MM',
                                        'inputmode': 'numeric',
                                        'autocomplete': 'off'
                                    }
                                }) }}
                            </div>
                        </div>
                    </div>
                    <div class="form-card">
                        <div class="form-card__title">
                            <span>Localisation</span>
                            <h3 class="mb-0">Lieu de la célébration</h3>
                        </div>
                        {{ form_row(form.parish, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.church, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.addressLine1, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.addressLine2, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.addressPostalCodeAndCity, {'label_attr': {'class': 'form-label-sm'}}) }}
                    </div>
                </div>
            </div>

            <div class="wizard-step" data-step="1">
                <div class="participant-grid">
                    <div>
                        {% if form.marie is defined %}
                            <div class="participant-card">
                                <div class="participant-card__header">
                                    <h3 class="mb-0">Futur marié</h3>
                                    {% if wedding.marie %}
                                        <span class="badge rounded-pill bg-light text-secondary">{{ wedding.marie.email }}</span>
                                    {% endif %}
                                </div>
                                <div class="row g-3">
                                    <div class="col-sm-6">{{ form_row(form.marie.firstName, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-sm-6">{{ form_row(form.marie.name, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-sm-6">{{ form_row(form.marie.email, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-sm-6">{{ form_row(form.marie.telephone, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-12">{{ form_row(form.marie.addressLine1, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-12">{{ form_row(form.marie.addressLine2, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-12">{{ form_row(form.marie.addressPostalCodeAndCity, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                </div>
                                {{ form_rest(form.marie) }}
                            </div>
                        {% else %}
                            <div class="participant-empty">
                                <h3 class="mb-1">Inviter le futur marié</h3>
                                <p class="mb-0">Associez-le pour qu'il accède au déroulé et aux commentaires.</p>
                                {% if wedding.id %}
                                    <div class="d-flex flex-wrap gap-2">
                                        <button type="button" class="btn btn-outline-light invite-trigger" data-invite-role="marie" data-bs-toggle="modal" data-bs-target="#inviteModal">
                                            <i class="bi bi-envelope-heart"></i> Envoyer une invitation
                                        </button>
                                    </div>
                                {% else %}
                                    <div class="alert alert-light mb-0">Sauvegardez le mariage pour envoyer des invitations.</div>
                                {% endif %}
                            </div>
                        {% endif %}
                    </div>

                    <div>
                        {% if form.mariee is defined %}
                            <div class="participant-card">
                                <div class="participant-card__header">
                                    <h3 class="mb-0">Future mariée</h3>
                                    {% if wedding.mariee %}
                                        <span class="badge rounded-pill bg-light text-secondary">{{ wedding.mariee.email }}</span>
                                    {% endif %}
                                </div>
                                <div class="row g-3">
                                    <div class="col-sm-6">{{ form_row(form.mariee.firstName, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-sm-6">{{ form_row(form.mariee.name, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-sm-6">{{ form_row(form.mariee.email, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-sm-6">{{ form_row(form.mariee.telephone, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-12">{{ form_row(form.mariee.addressLine1, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-12">{{ form_row(form.mariee.addressLine2, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-12">{{ form_row(form.mariee.addressPostalCodeAndCity, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                </div>
                                {{ form_rest(form.mariee) }}
                            </div>
                        {% else %}
                            <div class="participant-empty">
                                <h3 class="mb-1">Inviter la future mariée</h3>
                                <p class="mb-0">Son profil est nécessaire pour partager le déroulé et les documents.</p>
                                {% if wedding.id %}
                                    <div class="d-flex flex-wrap gap-2">
                                        <button type="button" class="btn btn-outline-light invite-trigger" data-invite-role="mariee" data-bs-toggle="modal" data-bs-target="#inviteModal">
                                            <i class="bi bi-envelope-heart"></i> Envoyer une invitation
                                        </button>
                                    </div>
                                {% else %}
                                    <div class="alert alert-light mb-0">Sauvegardez le mariage pour envoyer des invitations.</div>
                                {% endif %}
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>

            <div class="wizard-step" data-step="2">
                <div class="form-grid">
                    <div class="form-card">
                        <div class="form-card__title">
                            <span>Musiciens</span>
                            <h3 class="mb-0">Coordonner les musiciens</h3>
                        </div>
                        <div class="d-flex align-items-center gap-2 text-muted small mb-3">
                            <span class="badge text-bg-light">{{ wedding.musicians|length }}</span>
                            <span>Musicien(s)</span>
                        </div>
                        {% if wedding.musicians|length > 0 %}
                            <ul class="list-group list-group-flush">
                                {% for musician in wedding.musicians %}
                                    <li class="list-group-item px-0 border-0 py-3 d-flex justify-content-between align-items-start gap-3">
                                        <div>
                                            <span class="fw-semibold">{{ musician.fullName ?? musician.email }}</span>
                                            <div class="text-muted small">{{ musician.email }}</div>
                                            {% if musician.telephone %}
                                                <div class="text-muted small"><i class="bi bi-telephone me-1"></i>{{ musician.telephone }}</div>
                                            {% endif %}
                                        </div>
                                        {% if wedding.id %}
                                            <button
                                                type="button"
                                                class="btn btn-sm btn-outline-danger ms-auto js-remove-intervenant"
                                                data-form="remove-musician-{{ musician.id }}"
                                                data-confirm="Retirer ce musicien du mariage ?"
                                                title="Retirer"
                                            >
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        {% endif %}
                                    </li>
                                {% endfor %}
                            </ul>
                        {% else %}
                            <p class="text-muted small mb-0">Aucun musicien n'est encore associé pour le moment.</p>
                        {% endif %}
                        <div class="d-flex flex-wrap gap-2 mt-3">
                            {% if wedding.id %}
                                <button type="button" class="btn btn-outline-primary btn-rounded invite-trigger" data-invite-role="musicien" data-bs-toggle="modal" data-bs-target="#inviteModal">
                                    <i class="bi bi-person-plus"></i>
                                    Inviter un musicien
                                </button>
                            {% else %}
                                <p class="text-muted small mb-0">Sauvegardez le mariage pour inviter un intervenant.</p>
                            {% endif %}
                        </div>
                    </div>

                    <div class="form-card">
                        <div class="form-card__title">
                            <span>Paroisse</span>
                            <h3 class="mb-0">Collaborer avec la paroisse</h3>
                        </div>
                        <div class="d-flex align-items-center gap-2 text-muted small mb-3">
                            <span class="badge text-bg-light">{{ wedding.parishUsers|length }}</span>
                            <span>Contact(s)</span>
                        </div>
                        {% if wedding.parishUsers|length > 0 %}
                            <ul class="list-group list-group-flush">
                                {% for parishUser in wedding.parishUsers %}
                                    <li class="list-group-item px-0 border-0 py-3 d-flex justify-content-between align-items-start gap-3">
                                        <div>
                                            <span class="fw-semibold">{{ parishUser.fullName ?? parishUser.email }}</span>
                                            <div class="text-muted small">{{ parishUser.email }}</div>
                                            {% if parishUser.telephone %}
                                                <div class="text-muted small"><i class="bi bi-telephone me-1"></i>{{ parishUser.telephone }}</div>
                                            {% endif %}
                                        </div>
                                        {% if wedding.id %}
                                            <button
                                                type="button"
                                                class="btn btn-sm btn-outline-danger ms-auto js-remove-intervenant"
                                                data-form="remove-parish-{{ parishUser.id }}"
                                                data-confirm="Retirer ce contact paroissial ?"
                                                title="Retirer"
                                            >
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        {% endif %}
                                    </li>
                                {% endfor %}
                            </ul>
                        {% else %}
                            <p class="text-muted small mb-0">Aucun contact paroissial n'est encore associé à ce mariage.</p>
                        {% endif %}
                        <div class="d-flex flex-wrap gap-2 mt-3">
                            {% if wedding.id %}
                                <button type="button" class="btn btn-outline-primary btn-rounded invite-trigger" data-invite-role="paroisse" data-bs-toggle="modal" data-bs-target="#inviteModal">
                                    <i class="bi bi-building"></i>
                                    Inviter la paroisse
                                </button>
                            {% else %}
                                <p class="text-muted small mb-0">Sauvegardez le mariage pour inviter un intervenant.</p>
                            {% endif %}
                        </div>
                    </div>

                    <div class="form-card">
                        <div class="form-card__title">
                            <span>Célébrant</span>
                            <h3 class="mb-0">Coordonnées du prêtre</h3>
                        </div>
                        {{ form_row(form.priestFirstName, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.priestLastName, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.priestPhoneNumber, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.priestEMail, {'label_attr': {'class': 'form-label-sm'}}) }}
                    </div>
                </div>
            </div>

            <div class="wizard-step" data-step="3">
                <div class="deroule-container">
                    {% set types = songTypes is defined ? songTypes : [] %}
                    {% set groups = {} %}
                    {% for t in types %}
                        {% set label = t.celebrationPeriod is not null ? t.celebrationPeriod.value : 'Autres' %}
                        {% if groups[label] is defined %}
                            {% set groups = groups|merge({ (label): groups[label]|merge([t]) }) %}
                        {% else %}
                            {% set groups = groups|merge({ (label): [t] }) %}
                        {% endif %}
                    {% endfor %}

                    {% set order = ['Accueil','Liturgie de la Parole','Liturgie du Mariage','Liturgie Eucharistique','Envoi','Autres'] %}

                    {% if groups is empty %}
                        <div class="alert alert-light mb-0">Aucun type de chant défini. Ajoute des types dans l'administration.</div>
                    {% else %}
                        <div class="deroule-header d-none d-lg-flex">
                            <div class="deroule-col-type">TYPE</div>
                            <div class="deroule-col-choice">VOTRE CHOIX</div>
                            <div class="deroule-col-check">VALIDATION MUSICIEN</div>
                            <div class="deroule-col-check">VALIDATION PAROISSE</div>
                            <div class="deroule-col-comments">COM.</div>
                        </div>

                        <div class="deroule-groups">
                            {% for label in order %}
                                {% if groups[label] is defined %}
                                    <div class="deroule-group">
                                        <div class="deroule-group-header">{{ label }}</div> 
                                        <div class="deroule-group-body">
                                            {% for type in groups[label] %}
                                                {% set songsForType = availableSongsByType[type.id]|default(type.songs) %}
                                                {% set selectionState = songSelectionsByType[type.id]|default({}) %}
                                                {% set selectedSongId = selectionState.songId ?? null %}
                                                {% set validatedMusician = selectionState.validatedByMusician ?? false %}
                                                {% set validatedParish = selectionState.validatedByParish ?? false %}
                                                <div class="deroule-row">
                                                    <div>
                                                        <span class="deroule-type-badge">{{ type.name }}</span>
                                                    </div>
                                                    <div>
                                                        <select name="deroule[{{ label|replace({' ':'_'}) }}][{{ type.id|default(loop.index) }}]" class="form-select deroule-select deroule-select--large js-deroule-select" data-placeholder="Rechercher un chant" data-song-type="{{ type.id }}">
                                                            <option value="" {% if selectedSongId is null %}selected{% endif %}>Aucun chant sélectionné</option>
                                                            {% if songsForType|length > 0 %}
                                                                {% for song in songsForType %}
                                                                    <option value="{{ song.id }}" {% if selectedSongId is not null and song.id == selectedSongId %}selected{% endif %}>{{ song.name ?? (song.title ?? 'Titre inconnu') }}</option>
                                                                {% endfor %}
                                                            {% else %}
                                                                <option disabled>Pas de chants disponibles</option>
                                                            {% endif %}
                                                        </select>
                                                    </div>
                                                    <div>
                                                        <input type="hidden" name="deroule_validation_musician[{{ type.id }}]" value="{{ validatedMusician ? '1' : '0' }}" data-validation-input="musician-{{ type.id }}">
                                                        <button type="button" class="btn btn-validation js-validation-toggle {{ validatedMusician ? 'is-active' : '' }}" data-role="musician" data-type="{{ type.id }}">MUS</button>
                                                    </div>
                                                    <div>
                                                        <input type="hidden" name="deroule_validation_parish[{{ type.id }}]" value="{{ validatedParish ? '1' : '0' }}" data-validation-input="parish-{{ type.id }}">
                                                        <button type="button" class="btn btn-validation js-validation-toggle {{ validatedParish ? 'is-active' : '' }}" data-role="parish" data-type="{{ type.id }}">PAR</button>
                                                    </div>
                                                    <div>
                                                        {% if wedding.id %}
                                                            <button type="button" class="btn btn-sm btn-outline-secondary open-comments" data-wedding="{{ wedding.id }}" data-songtype="{{ type.id }}" aria-haspopup="dialog" aria-controls="commentsModal">
                                                                <i class="bi bi-chat-dots"></i>
                                                            </button>
                                                        {% else %}
                                                            <button type="button" class="btn btn-sm btn-outline-secondary" disabled title="Sauvegardez le mariage pour activer les commentaires">
                                                                <i class="bi bi-chat-dots"></i>
                                                            </button>
                                                        {% endif %}
                                                    </div>
                                                </div>
                                            {% endfor %}
                                        </div>
                                    </div>
                                {% endif %}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                {{ form_widget(form.songs, {'attr': {'class': 'd-none'}}) }}
            </div>

            <div class="wizard-step" data-step="4">
                <div class="form-grid">
                    <div class="form-card">
                        <div class="form-card__title">
                            <span>Finances</span>
                            <h3 class="mb-0">Suivi des montants</h3>
                        </div>
                        {% set paymentStatus = {
                            'label': 'Statut non défini',
                            'badge': 'secondary'
                        } %}
                        {% if wedding.isPaid %}
                            {% set paymentStatus = {
                                'label': 'Mariage réglé',
                                'badge': 'success'
                            } %}
                        {% else %}
                            {% if wedding.paymentOption == 'delegated' %}
                                {% set paymentStatus = {
                                    'label': 'En attente du paiement des mariés',
                                    'badge': 'warning'
                                } %}
                            {% elseif wedding.paymentOption == 'card_pending_partner' %}
                                {% set paymentStatus = {
                                    'label': 'Paiement partenaire en cours',
                                    'badge': 'warning'
                                } %}
                            {% elseif wedding.paymentOption == 'card_partner' %}
                                {% set paymentStatus = {
                                    'label': 'Paiement CB partenaire confirmé',
                                    'badge': 'success'
                                } %}
                            {% elseif wedding.paymentOption == 'card_user' %}
                                {% set paymentStatus = {
                                    'label': 'Paiement en ligne à finaliser',
                                    'badge': 'info'
                                } %}
                            {% elseif wedding.paymentOption == 'credit' %}
                                {% set paymentStatus = {
                                    'label': 'Réglé via crédits',
                                    'badge': 'success'
                                } %}
                            {% endif %}
                        {% endif %}
                        <div class="wizard-finance-inputs">
                            <div class="wizard-finance-field">
                                <label for="{{ form.montantTotal.vars.id }}" class="form-label-sm text-uppercase text-muted fw-semibold d-block mb-2">Montant de la prestation</label>
                                {{ form_widget(form.montantTotal, {'attr': form.montantTotal.vars.attr|merge({})}) }}
                                {{ form_errors(form.montantTotal) }}
                            </div>
                            <div class="wizard-finance-field">
                                <label for="{{ form.montantPaye.vars.id }}" class="form-label-sm text-uppercase text-muted fw-semibold d-block mb-2">Montant déjà versé</label>
                                {{ form_widget(form.montantPaye, {'attr': form.montantPaye.vars.attr|merge({})}) }}
                                {{ form_errors(form.montantPaye) }}
                            </div>
                        </div>
                        <div class="wizard-finance-grid">
                            <div class="wizard-finance-item">
                                <div class="wizard-finance-label">Acompte</div>
                                <div class="wizard-finance-value">
                                    {% if wedding.montantTotal and wedding.montantPaye is not null and wedding.montantTotal > 0 %}
                                        {{ ((wedding.montantPaye / wedding.montantTotal) * 100)|round(0) }} %
                                    {% else %}
                                        -
                                    {% endif %}
                                </div>
                            </div>
                            <div class="wizard-finance-item">
                                <div class="wizard-finance-label">Reste dû</div>
                                <div class="wizard-finance-value">
                                    {% if wedding.montantTotal is not null and wedding.montantPaye is not null %}
                                        {{ (wedding.montantTotal - wedding.montantPaye)|number_format(2, '.', ' ') }} €
                                    {% else %}
                                        -
                                    {% endif %}
                                </div>
                            </div>
                            <div class="wizard-finance-item">
                                <div class="wizard-finance-label">Statut du paiement NMDM</div>
                                <div class="wizard-finance-value">
                                    <span class="badge text-bg-{{ paymentStatus.badge }}">{{ paymentStatus.label }}</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-card">
                        <div class="form-card__title">
                            <span>Clôture</span>
                            <h3 class="mb-0">Archive &amp; options</h3>
                        </div>
                        {% set isArchived = form.archive.vars.data ?? false %}
                        <div class="mb-3">
                            <span class="form-label-sm text-uppercase text-muted fw-semibold d-block mb-2">Statut du dossier</span>
                            <div class="d-flex flex-wrap gap-2">
                                <button
                                    type="button"
                                    class="btn btn-validation js-toggle-option {{ isArchived ? '' : 'is-active' }}"
                                    data-target="#{{ form.archive.vars.id }}"
                                    data-value="0"
                                >
                                    Actif
                                </button>
                                <button
                                    type="button"
                                    class="btn btn-validation js-toggle-option {{ isArchived ? 'is-active' : '' }}"
                                    data-target="#{{ form.archive.vars.id }}"
                                    data-value="1"
                                >
                                    Archivé
                                </button>
                            </div>
                            {{ form_widget(form.archive, {'attr': {'class': 'd-none js-toggle-input'}}) }}
                            {{ form_errors(form.archive) }}
                        </div>
                        <p class="mb-0 small text-muted">Archivez un mariage une fois la célébration passée pour conserver un historique propre.</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="wizard-actions">
            <div class="wizard-actions__nav">
                <button type="button" class="btn btn-outline-secondary wizard-prev d-none" data-action="prev-step">
                    <i class="bi bi-arrow-left"></i>
                    Retour
                </button>
                <button type="button" class="btn btn-primary wizard-next" data-action="next-step">
                    Continuer
                    <i class="bi bi-arrow-right ms-2"></i>
                </button>
            </div>
            <button type="submit" class="btn btn-success wizard-submit d-none" data-action="submit-step">
                <i class="bi bi-check-circle"></i>
                Valider le mariage
            </button>
        </div>

        {{ form_rest(form) }}
        {{ form_end(form, {'render_rest': false}) }}
    </section>

    {% if wedding.id %}
        <div class="d-none">
            {% for musician in wedding.musicians %}
                <form id="remove-musician-{{ musician.id }}" method="post" action="{{ path('app_wedding_intervenants_remove', {'id': wedding.id, 'type': 'musician', 'userId': musician.id}) }}">
                    <input type="hidden" name="_token" value="{{ csrf_token('remove_intervenant_musician_' ~ wedding.id ~ '_' ~ musician.id) }}">
                </form>
            {% endfor %}
            {% for parishUser in wedding.parishUsers %}
                <form id="remove-parish-{{ parishUser.id }}" method="post" action="{{ path('app_wedding_intervenants_remove', {'id': wedding.id, 'type': 'parish', 'userId': parishUser.id}) }}">
                    <input type="hidden" name="_token" value="{{ csrf_token('remove_intervenant_parish_' ~ wedding.id ~ '_' ~ parishUser.id) }}">
                </form>
            {% endfor %}
        </div>
    {% endif %}
    {% if not wedding.id %}
    <aside class="wizard-sidecard">
        <div class="wizard-sidecard__inner" id="wizardSideContent">
            <div class="wizard-sidecard__slide active" data-step="0">
                <span class="wizard-badge"><i class="bi bi-geo-alt"></i> Étape 1</span>
                <h2 class="wizard-sidecard__title">Cadrez la célébration</h2>
                <p class="mb-0">Précisez le format, la date et le lieu pour déclencher les rappels automatiques auprès des partenaires.</p>
                <div class="wizard-tip"><i class="bi bi-lightbulb me-2"></i>Plus les informations sont complètes, plus le calendrier partagé est pertinent.</div>
            </div>
            <div class="wizard-sidecard__slide" data-step="1">
                <span class="wizard-badge"><i class="bi bi-people"></i> Étape 2</span>
                <h2 class="wizard-sidecard__title">Pilotez le couple</h2>
                <p class="mb-0">Actualisez les coordonnées des mariés sans quitter le parcours. Invitez-les instantanément s’ils ne sont pas encore connectés.</p>
                <div class="wizard-tip"><i class="bi bi-envelope-heart me-2"></i>Les invitations envoyées depuis ici héritent automatiquement des crédits disponibles.</div>
            </div>
            <div class="wizard-sidecard__slide" data-step="2">
                <span class="wizard-badge"><i class="bi bi-people"></i> Étape 3</span>
                <h2 class="wizard-sidecard__title">Activez les intervenants</h2>
                <p class="mb-0">Invitez les musiciens et la paroisse, centralisez leurs coordonnées et suivez l'état des contacts clés.</p>
                <div class="wizard-tip"><i class="bi bi-telephone me-2"></i>Ajoutez les détails du célébrant pour fluidifier la collaboration.</div>
            </div>
            <div class="wizard-sidecard__slide" data-step="3">
                <span class="wizard-badge"><i class="bi bi-music-note-beamed"></i> Étape 4</span>
                <h2 class="wizard-sidecard__title">Construisez le déroulé</h2>
                <p class="mb-0">Associez des chants à chaque moment clé et suivez les validations du célébrant et des musiciens en direct.</p>
                <div class="wizard-tip"><i class="bi bi-chat-dots me-2"></i>Les commentaires contextualisés restent accessibles depuis chaque type de chant.</div>
            </div>
            <div class="wizard-sidecard__slide" data-step="4">
                <span class="wizard-badge"><i class="bi bi-coin"></i> Étape 5</span>
                <h2 class="wizard-sidecard__title">Clôturez le dossier</h2>
                <p class="mb-0">Suivez les montants versés et finalisez les options avant d'archiver le dossier.</p>
                <div class="wizard-tip"><i class="bi bi-clipboard-check me-2"></i>Pensez à archiver le mariage une fois la célébration passée pour conserver un historique propre.</div>
            </div>
        </div>
    </aside>
    {% endif %}
    </div>
</div>

<div class="modal fade" id="userRoleModal" tabindex="-1" aria-hidden="true" data-autoshow="{{ shouldOpenRoleModal ? '1' : '0' }}" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Votre rôle dans ce mariage</h5>
            </div>
            <div class="modal-body">
                <p class="mb-4">Vous créez un nouveau mariage. Êtes-vous le marié ou la mariée ?</p>
                <div class="d-grid gap-3">
                    <button type="button" class="btn btn-outline-primary btn-lg js-user-role-option" data-role="marie">
                        <i class="bi bi-person me-2"></i> Je suis le marié
                    </button>
                    <button type="button" class="btn btn-outline-primary btn-lg js-user-role-option" data-role="mariee">
                        <i class="bi bi-person me-2"></i> Je suis la mariée
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade payment-option-modal" id="paymentOptionModal" tabindex="-1" aria-hidden="true" data-autoshow="{{ shouldOpenPaymentModal ? '1' : '0' }}" data-intercept="{{ shouldPromptPaymentOption ? '1' : '0' }}">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Choisir l'option de paiement</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
            </div>
            <div class="modal-body">
                {% if paymentOptionError %}
                    <div class="alert alert-danger mb-4">{{ paymentOptionError }}</div>
                {% endif %}
                <p class="text-muted mb-4">Sélectionnez comment régler la création du mariage. Vous pourrez modifier ce choix tant que le paiement n'est pas confirmé.</p>
                <div class="payment-option-grid">
                    <button type="button" class="payment-option-card js-payment-option {{ currentPaymentOption == 'credit' ? 'is-selected' }}" data-option="credit" {% if userCredits < 1 %}disabled{% endif %}>
                        <span class="payment-option-card__title"><i class="bi bi-gem"></i> Utiliser 1 crédit</span>
                        <span class="payment-option-card__subtitle">Déduisez un crédit de votre solde et ouvrez instantanément les invitations.</span>
                        <span class="payment-option-card__meta">
                            {% if userCredits > 0 %}
                                {{ userCredits }} crédit{{ userCredits > 1 ? 's' : '' }} disponible{{ userCredits > 1 ? 's' : '' }}
                            {% else %}
                                Solde insuffisant
                            {% endif %}
                        </span>
                    </button>
                    <button type="button" class="payment-option-card js-payment-option {{ currentPaymentOption == 'card' ? 'is-selected' }}" data-option="card">
                        <span class="payment-option-card__title"><i class="bi bi-credit-card"></i> Payer 39,90 €</span>
                        <span class="payment-option-card__subtitle">Réglez maintenant par carte bancaire à tarif préférentiel partenaire.</span>
                        <span class="payment-option-card__meta">Redirection sécurisée vers Stripe</span>
                    </button>
                    <button type="button" class="payment-option-card js-payment-option {{ currentPaymentOption == 'later' ? 'is-selected' }}" data-option="later">
                        <span class="payment-option-card__title"><i class="bi bi-people"></i> Laisser les mariés payer</span>
                        <span class="payment-option-card__subtitle">Créez le dossier et envoyez une demande de paiement aux mariés.</span>
                        <span class="payment-option-card__meta">Ils recevront une notification dédiée</span>
                    </button>
                </div>
            </div>
            <div class="modal-footer d-flex justify-content-between">
                <small class="text-muted">Le choix du paiement conditionne l'accès aux invitations.</small>
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Fermer</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade duplicate-modal" id="duplicateCheckModal" tabindex="-1" aria-hidden="true" data-autoshow="{{ wedding.id ? '0' : '1' }}">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header duplicate-modal__header">
                <h5 class="modal-title text-white">Vérifier les mariages existants</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fermer"></button>
            </div>
            <div class="modal-body">
                <p class="duplicate-modal__intro mb-4">
                    Pour éviter la création de doublons, indiquez l'adresse e-mail d'au moins un des mariés. Nous vous proposerons les mariages déjà associés à ces contacts.
                </p>
                <form id="duplicateCheckForm" class="duplicate-form" data-check-url="{{ path('app_wedding_check_duplicates') }}" data-request-url-template="{{ path('app_wedding_request_access', {'id': 999999}) }}">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="duplicate-email-marie" class="form-label">Email du futur marié</label>
                            <input type="email" class="form-control" id="duplicate-email-marie" name="email_marie" placeholder="nom@exemple.fr">
                        </div>
                        <div class="col-md-6">
                            <label for="duplicate-email-mariee" class="form-label">Email de la future mariée</label>
                            <input type="email" class="form-control" id="duplicate-email-mariee" name="email_mariee" placeholder="prenom@exemple.fr">
                        </div>
                        <div class="col-12">
                            <label for="duplicate-message" class="form-label">Message pour les mariés (facultatif)</label>
                            <textarea class="form-control" id="duplicate-message" name="request_message" rows="3" placeholder="Expliquez votre demande ou précisez votre rôle."></textarea>
                        </div>
                    </div>
                    <div class="d-flex flex-column flex-md-row gap-3 align-items-md-center justify-content-between mt-4">
                        <div id="duplicateFeedback" class="duplicate-feedback text-muted"></div>
                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-search"></i>
                                Rechercher des mariages
                            </button>
                            <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                                Continuer sans doublon
                            </button>
                        </div>
                    </div>
                </form>
                <div id="duplicateResults" class="duplicate-results"></div>
            </div>
        </div>
    </div>
</div>

{% if wedding.id %}
    <div class="modal fade" id="inviteModal" tabindex="-1" aria-labelledby="inviteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="inviteModalLabel">Inviter quelqu'un</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <form action="{{ path('app_wedding_invite', {'id': wedding.id}) }}" method="POST">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email" required>
                        </div>
                        <div class="mb-3">
                            <label for="role" class="form-label">Rôle</label>
                            <select class="form-select" id="role" name="role" required>
                                <option value="paroisse">Paroisse</option>
                                <option value="musicien">Musicien</option>
                                <option value="marie">Marié</option>
                                <option value="mariee">Mariée</option>
                            </select>
                        </div>
                    </div>
                    {% if generatedInvitationLink is defined %}
                        <div class="alert alert-info mt-3 mx-3">
                            <p class="mb-2">Lien d'invitation généré :</p>
                            <div class="input-group">
                                <input type="text" class="form-control" id="invitation-link" value="{{ generatedInvitationLink }}" readonly>
                                <button type="button" class="btn btn-outline-secondary" onclick="window.copyInvitationLink()">Copier</button>
                            </div>
                        </div>
                    {% endif %}
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                        <button type="submit" class="btn btn-primary">Envoyer l'invitation</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endif %}

<div class="modal fade" id="commentsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Commentaires</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
            </div>
            <div class="modal-body">
                <div class="text-center py-4" id="commentsModalSpinner">
                    <div class="spinner-border text-secondary" role="status"><span class="visually-hidden">Chargement...</span></div>
                </div>
            </div>
            <div class="modal-footer"></div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        window.copyInvitationLink = function () {
            const copyText = document.getElementById('invitation-link');
            if (!copyText) {
                return;
            }
            copyText.select();
            copyText.setSelectionRange(0, 99999);
            navigator.clipboard.writeText(copyText.value).then(function () {
                alert('Lien copié dans le presse-papiers !');
            });
        };

        document.addEventListener('DOMContentLoaded', function () {
            const weddingForm = document.getElementById('weddingForm');
            const paymentHiddenInput = document.getElementById('payment_option_input');
            const paymentModalEl = document.getElementById('paymentOptionModal');
            const hiddenSongsSelect = document.getElementById('{{ form.songs.vars.id|e('js') }}');
            const derouleSelects = Array.from(document.querySelectorAll('.js-deroule-select'));
            const booleanToggleInputs = Array.from(document.querySelectorAll('.js-toggle-input'));

            const syncBooleanToggle = (input) => {
                if (!input) {
                    return;
                }
                const isChecked = input.checked;
                document.querySelectorAll(`.js-toggle-option[data-target="#${input.id}"]`).forEach((btn) => {
                    const btnValue = btn.dataset.value === '1';
                    btn.classList.toggle('is-active', btnValue === isChecked);
                });
            };

            const syncSongsField = () => {
                if (!hiddenSongsSelect) {
                    return;
                }

                const selectedIds = new Set();
                derouleSelects.forEach((selectEl) => {
                    const value = selectEl.value;
                    if (value) {
                        selectedIds.add(value);
                    }
                });

                Array.from(hiddenSongsSelect.options).forEach((option) => {
                    option.selected = selectedIds.has(option.value);
                });
            };

            derouleSelects.forEach((selectEl) => {
                selectEl.addEventListener('change', syncSongsField);
            });

            if (weddingForm) {
                weddingForm.addEventListener('submit', syncSongsField);
            }

            syncSongsField();

            document.querySelectorAll('.js-validation-toggle').forEach((btn) => {
                btn.addEventListener('click', function () {
                    const typeId = this.dataset.type;
                    const role = this.dataset.role;
                    if (!typeId || !role) {
                        return;
                    }

                    const input = document.querySelector(`[data-validation-input="${role}-${typeId}"]`);
                    if (!input) {
                        return;
                    }

                    const newValue = input.value === '1' ? '0' : '1';
                    input.value = newValue;
                    this.classList.toggle('is-active', newValue === '1');
                });
            });

            document.querySelectorAll('.js-toggle-option').forEach((btn) => {
                btn.addEventListener('click', function () {
                    const targetSelector = this.dataset.target;
                    if (!targetSelector) {
                        return;
                    }

                    const targetInput = document.querySelector(targetSelector);
                    if (!targetInput) {
                        return;
                    }

                    const shouldCheck = this.dataset.value === '1';
                    targetInput.checked = shouldCheck;
                    if (shouldCheck) {
                        targetInput.setAttribute('checked', 'checked');
                    } else {
                        targetInput.removeAttribute('checked');
                    }

                    targetInput.dispatchEvent(new Event('change', { bubbles: true }));
                    syncBooleanToggle(targetInput);
                });
            });

            booleanToggleInputs.forEach((input) => {
                input.addEventListener('change', () => syncBooleanToggle(input));
                syncBooleanToggle(input);
            });

            document.querySelectorAll('.js-remove-intervenant').forEach((btn) => {
                btn.addEventListener('click', function () {
                    const formId = this.dataset.form;
                    const confirmation = this.dataset.confirm || '';
                    if (!formId) {
                        return;
                    }
                    if (confirmation && !window.confirm(confirmation)) {
                        return;
                    }
                    const targetForm = document.getElementById(formId);
                    if (targetForm) {
                        targetForm.submit();
                    }
                });
            });

            // Gestion de la modal de sélection du rôle utilisateur (marié/mariée)
            const userRoleModalEl = document.getElementById('userRoleModal');
            const userRoleInput = document.getElementById('user_role_input');
            if (userRoleModalEl && typeof bootstrap !== 'undefined') {
                const userRoleModal = new bootstrap.Modal(userRoleModalEl, {
                    backdrop: 'static',
                    keyboard: false,
                });
                const autoShowRoleModal = userRoleModalEl.dataset.autoshow === '1';
                const roleButtons = userRoleModalEl.querySelectorAll('.js-user-role-option');

                roleButtons.forEach((btn) => {
                    btn.addEventListener('click', function () {
                        const role = this.dataset.role || '';
                        if (!role || !userRoleInput || !weddingForm) {
                            return;
                        }

                        userRoleInput.value = role;
                        userRoleModal.hide();
                        weddingForm.requestSubmit();
                    });
                });

                if (autoShowRoleModal) {
                    userRoleModal.show();
                }

                // Intercepter la soumission si l'utilisateur est ROLE_USER uniquement et n'a pas choisi son rôle
                const isOnlyUser = {{ isOnlyUser|default(false) ? 'true' : 'false' }};
                const isNewWedding = {{ wedding.id ? 'false' : 'true' }};
                if (isOnlyUser && isNewWedding && weddingForm) {
                    weddingForm.addEventListener('submit', function (event) {
                        if (!userRoleInput || userRoleInput.value !== '') {
                            return;
                        }

                        event.preventDefault();
                        userRoleModal.show();
                    });
                }
            }

            if (paymentModalEl && typeof bootstrap !== 'undefined') {
                const paymentModal = new bootstrap.Modal(paymentModalEl, {
                    backdrop: 'static',
                    keyboard: false,
                });
                const autoShowPaymentModal = paymentModalEl.dataset.autoshow === '1';
                const shouldInterceptPayment = paymentModalEl.dataset.intercept === '1';
                const paymentButtons = paymentModalEl.querySelectorAll('.js-payment-option');

                const highlightPaymentOption = (value) => {
                    paymentButtons.forEach((btn) => {
                        btn.classList.toggle('is-selected', btn.dataset.option === value);
                    });
                };

                if (paymentHiddenInput && paymentHiddenInput.value) {
                    highlightPaymentOption(paymentHiddenInput.value);
                }

                paymentButtons.forEach((btn) => {
                    if (btn.disabled) {
                        return;
                    }
                    btn.addEventListener('click', function () {
                        const option = this.dataset.option || '';
                        if (!option || !paymentHiddenInput || !weddingForm) {
                            return;
                        }

                        paymentHiddenInput.value = option;
                        highlightPaymentOption(option);
                        paymentModal.hide();
                        weddingForm.requestSubmit();
                    });
                });

                if (shouldInterceptPayment && weddingForm) {
                    weddingForm.addEventListener('submit', function (event) {
                        if (!paymentHiddenInput || paymentHiddenInput.value !== '') {
                            return;
                        }

                        event.preventDefault();
                        highlightPaymentOption('');
                        paymentModal.show();
                    });
                }

                if (autoShowPaymentModal) {
                    paymentModal.show();
                }
            }

            const duplicateModalEl = document.getElementById('duplicateCheckModal');
            if (duplicateModalEl && typeof bootstrap !== 'undefined') {
                const autoshow = duplicateModalEl.dataset.autoshow === '1';
                const duplicateModal = new bootstrap.Modal(duplicateModalEl, {
                    backdrop: 'static',
                    keyboard: false,
                });
                const duplicateForm = duplicateModalEl.querySelector('#duplicateCheckForm');
                const feedbackEl = duplicateModalEl.querySelector('#duplicateFeedback');
                const resultsContainer = duplicateModalEl.querySelector('#duplicateResults');
                const messageInput = duplicateModalEl.querySelector('#duplicate-message');
                const submitBtn = duplicateForm?.querySelector('button[type="submit"]');
                const checkUrl = duplicateForm?.dataset.checkUrl || '';
                const requestTemplate = duplicateForm?.dataset.requestUrlTemplate || '';
                let lastEmails = [];

                const setFeedback = (text, tone = 'muted') => {
                    if (!feedbackEl) {
                        return;
                    }
                    feedbackEl.textContent = text;
                    feedbackEl.className = `duplicate-feedback text-${tone}`;
                };

                const buildRequestUrl = (id) => {
                    if (!requestTemplate) {
                        return `/mariages/${id}/request-access`;
                    }
                    if (requestTemplate.includes('999999')) {
                        return requestTemplate.replace('999999', String(id));
                    }
                    return requestTemplate.replace(/\d+/, String(id));
                };

                const renderParticipants = (list) => {
                    if (!Array.isArray(list) || list.length === 0) {
                        return '<span class="text-muted">Aucun participant renseigné.</span>';
                    }
                    return list
                        .map((item) => `<span><i class="bi bi-person-fill me-2 text-secondary"></i>${item}</span>`)
                        .join('');
                };

                const renderResults = (weddings) => {
                    resultsContainer.innerHTML = '';

                    if (!Array.isArray(weddings) || weddings.length === 0) {
                        setFeedback('Aucun mariage correspondant n’a été trouvé.', 'warning');
                        return;
                    }

                    const fragment = document.createDocumentFragment();

                    weddings.forEach((wedding) => {
                        const card = document.createElement('article');
                        card.className = 'duplicate-card';
                        card.innerHTML = `
                            <div class="duplicate-card__header">
                                <span class="duplicate-card__badge"><i class="bi bi-stars"></i> Potentiel doublon</span>
                                <span class="text-muted small">${wedding.date ?? 'Date inconnue'}</span>
                            </div>
                            <h3 class="h5 mb-1">${wedding.title}</h3>
                            <p class="mb-0 text-muted">${wedding.church ?? 'Lieu non renseigné'}</p>
                            <div class="duplicate-card__participants">
                                ${renderParticipants(wedding.participants)}
                            </div>
                            <div class="duplicate-card__footer">
                                <a class="btn btn-light btn-sm" href="${wedding.viewUrl}" target="_blank" rel="noopener">
                                    <i class="bi bi-box-arrow-up-right"></i>
                                    Ouvrir
                                </a>
                                <button type="button" class="btn btn-outline-primary btn-sm duplicate-request" data-wedding-id="${wedding.id}">
                                    <i class="bi bi-envelope"></i>
                                    Demander l’ajout
                                </button>
                            </div>
                        `;
                        fragment.appendChild(card);
                    });

                    resultsContainer.appendChild(fragment);
                    setFeedback('Sélectionnez un mariage existant pour envoyer votre demande.', 'success');
                };

                if (duplicateForm && checkUrl) {
                    duplicateForm.addEventListener('submit', async (event) => {
                        event.preventDefault();
                        const formData = new FormData(duplicateForm);
                        const emailMarie = (formData.get('email_marie') || '').toString().trim();
                        const emailMariee = (formData.get('email_mariee') || '').toString().trim();

                        if (!emailMarie && !emailMariee) {
                            setFeedback('Veuillez renseigner au moins une adresse e-mail.', 'danger');
                            return;
                        }

                        lastEmails = [emailMarie, emailMariee].filter(Boolean);
                        setFeedback('Recherche en cours...', 'info');
                        resultsContainer.innerHTML = '';
                        if (submitBtn) {
                            submitBtn.disabled = true;
                        }

                        try {
                            const response = await fetch(checkUrl, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest',
                                },
                                body: JSON.stringify({
                                    ...(emailMarie ? { email_marie: emailMarie } : {}),
                                    ...(emailMariee ? { email_mariee: emailMariee } : {}),
                                }),
                            });

                            const payload = await response.json();

                            if (!response.ok) {
                                setFeedback(payload.message || 'La recherche a échoué.', 'danger');
                                return;
                            }

                            renderResults(payload.weddings || []);
                            if (payload.message) {
                                setFeedback(payload.message, (payload.weddings || []).length ? 'success' : 'warning');
                            }
                        } catch (error) {
                            console.error(error);
                            setFeedback('Une erreur est survenue lors de la recherche.', 'danger');
                        } finally {
                            if (submitBtn) {
                                submitBtn.disabled = false;
                            }
                        }
                    });
                }

                if (resultsContainer) {
                    resultsContainer.addEventListener('click', async (event) => {
                        const trigger = event.target.closest('.duplicate-request');
                        if (!trigger) {
                            return;
                        }

                        const weddingId = trigger.getAttribute('data-wedding-id');
                        if (!weddingId) {
                            return;
                        }

                        trigger.disabled = true;
                        trigger.classList.add('disabled');

                        try {
                            const response = await fetch(buildRequestUrl(weddingId), {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest',
                                },
                                body: JSON.stringify({
                                    message: messageInput ? messageInput.value : '',
                                    emails: lastEmails,
                                }),
                            });

                            const payload = await response.json();
                            if (!response.ok) {
                                setFeedback(payload.message || 'Impossible d’envoyer la demande.', 'danger');
                                trigger.disabled = false;
                                trigger.classList.remove('disabled');
                                return;
                            }

                            setFeedback(payload.message || 'Demande envoyée.', 'success');
                            trigger.innerHTML = '<i class="bi bi-check-lg"></i> Demande envoyée';
                            trigger.classList.replace('btn-outline-primary', 'btn-success');
                        } catch (error) {
                            console.error(error);
                            setFeedback('Une erreur est survenue lors de l’envoi de la demande.', 'danger');
                            trigger.disabled = false;
                            trigger.classList.remove('disabled');
                        }
                    });
                }

                if (autoshow) {
                    duplicateModal.show();
                }
            }

            const wizardLayout = document.getElementById('weddingWizard');
            const steps = Array.from(document.querySelectorAll('.wizard-step'));
            const stepperItems = Array.from(document.querySelectorAll('.wizard-stepper__item'));
            const sideSlides = Array.from(document.querySelectorAll('.wizard-sidecard__slide'));
            const prevBtn = document.querySelector('.wizard-prev');
            const nextBtn = document.querySelector('.wizard-next');
            const submitBtn = document.querySelector('.wizard-submit');
            let currentStep = 0;

            if (wizardLayout) {
                const defaultStep = parseInt(wizardLayout.dataset.defaultStep || '0', 10);
                if (!Number.isNaN(defaultStep)) {
                    currentStep = Math.max(0, Math.min(steps.length - 1, defaultStep));
                }
            }

            function syncUI() {
                steps.forEach((step, index) => step.classList.toggle('active', index === currentStep));
                stepperItems.forEach((item, index) => item.classList.toggle('active', index === currentStep));
                sideSlides.forEach((slide, index) => slide.classList.toggle('active', index === currentStep));
                if (prevBtn) {
                    prevBtn.classList.toggle('d-none', currentStep === 0);
                }
                if (nextBtn) {
                    nextBtn.classList.toggle('d-none', currentStep >= steps.length - 1);
                }
                if (submitBtn) {
                    submitBtn.classList.toggle('d-none', currentStep < steps.length - 1);
                }
            }

            if (prevBtn) {
                prevBtn.addEventListener('click', function () {
                    if (currentStep > 0) {
                        currentStep -= 1;
                        syncUI();
                    }
                });
            }

            if (nextBtn) {
                nextBtn.addEventListener('click', function () {
                    if (currentStep < steps.length - 1) {
                        currentStep += 1;
                        syncUI();
                    }
                });
            }

            stepperItems.forEach((item) => {
                item.addEventListener('click', function () {
                    const target = parseInt(item.dataset.step, 10);
                    if (!Number.isNaN(target)) {
                        currentStep = target;
                        syncUI();
                    }
                });
            });

            syncUI();

            if (window.TomSelect) {
                derouleSelects.forEach((select) => {
                    if (!select.tomselect) {
                        const instance = new TomSelect(select, {
                            placeholder: select.dataset.placeholder || 'Rechercher un chant',
                            allowEmptyOption: true,
                            create: false,
                            maxOptions: 500,
                            onChange: () => {
                                syncSongsField();
                            },
                        });
                        instance.wrapper.classList.add('deroule-select--large');
                        instance.control.classList.add('deroule-select--large');
                    }
                });
            }

            document.querySelectorAll('.invite-trigger').forEach((btn) => {
                btn.addEventListener('click', function () {
                    const roleInput = document.getElementById('role');
                    if (roleInput) {
                        roleInput.value = btn.getAttribute('data-invite-role') || '';
                    }
                });
            });

            const modalEl = document.getElementById('commentsModal');
            if (modalEl) {
                const bsModal = new bootstrap.Modal(modalEl);
                document.querySelectorAll('.open-comments').forEach((btn) => {
                    btn.addEventListener('click', async function () {
                        const weddingId = this.dataset.wedding;
                        const songTypeId = this.dataset.songtype;
                        const url = `/comments/${weddingId}/${songTypeId}`;

                        const body = modalEl.querySelector('.modal-body');
                        const footer = modalEl.querySelector('.modal-footer');
                        body.innerHTML = '<div class="text-center py-4"><div class="spinner-border text-secondary" role="status"><span class="visually-hidden">Chargement...</span></div></div>';
                        footer.innerHTML = '';
                        bsModal.show();

                        try {
                            const res = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                            const text = await res.text();
                            const parser = new DOMParser();
                            const doc = parser.parseFromString(text, 'text/html');

                            const header = doc.querySelector('h2');
                            const commentsBox = doc.querySelector('#comments-box');
                            const form = doc.querySelector('.card-footer form') || doc.querySelector('form');

                            body.innerHTML = '';
                            if (header) {
                                body.appendChild(header.cloneNode(true));
                            }
                            if (commentsBox) {
                                body.appendChild(commentsBox.cloneNode(true));
                            } else {
                                body.innerHTML += '<p class="text-muted">Aucun commentaire.</p>';
                            }

                            footer.innerHTML = '';
                            if (form) {
                                const injectedForm = form.cloneNode(true);
                                footer.appendChild(injectedForm);

                                injectedForm.addEventListener('submit', async function (evt) {
                                    evt.preventDefault();
                                    const fd = new FormData(injectedForm);
                                    const action = injectedForm.getAttribute('action') || url;
                                    const method = (injectedForm.getAttribute('method') || 'POST').toUpperCase();

                                    try {
                                        const response = await fetch(action, {
                                            method: method,
                                            body: fd,
                                            headers: { 'X-Requested-With': 'XMLHttpRequest' },
                                        });
                                        if (!response.ok) {
                                            throw new Error('Requête invalide');
                                        }

                                        const refreshed = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                                        const refreshedText = await refreshed.text();
                                        const refreshedDoc = new DOMParser().parseFromString(refreshedText, 'text/html');
                                        const newComments = refreshedDoc.querySelector('#comments-box');
                                        const newForm = refreshedDoc.querySelector('.card-footer form') || refreshedDoc.querySelector('form');

                                        body.querySelector('h2')?.remove();
                                        if (newComments) {
                                            const old = body.querySelector('#comments-box');
                                            if (old) {
                                                old.replaceWith(newComments.cloneNode(true));
                                            } else {
                                                body.appendChild(newComments.cloneNode(true));
                                            }
                                        }

                                        if (newForm) {
                                            footer.innerHTML = '';
                                            footer.appendChild(newForm.cloneNode(true));
                                        }
                                    } catch (err) {
                                        console.error(err);
                                        alert('Erreur lors de l\'envoi du commentaire.');
                                    }
                                });
                            } else {
                                footer.innerHTML = '<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>';
                            }
                        } catch (err) {
                            console.error(err);
                            const bodyEl = modalEl.querySelector('.modal-body');
                            bodyEl.innerHTML = '<p class="text-danger">Impossible de charger les commentaires.</p>';
                            modalEl.querySelector('.modal-footer').innerHTML = '<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>';
                        }
                    });
                });
            }
        });
    </script>
{% endblock %}