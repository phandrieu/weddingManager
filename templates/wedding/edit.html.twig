{% extends 'base.html.twig' %}

{% block title %}{{ wedding.id ? 'Modifier le mariage' : 'Ajouter un mariage' }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .wedding-wizard {
            display: grid;
            grid-template-columns: minmax(0, 1fr) minmax(0, clamp(280px, 32%, 75%));
            gap: clamp(2rem, 4vw, 3.5rem);
            align-items: flex-start;
            margin-top: clamp(1rem, 3vw, 2rem);
        }

        .wizard-page-title {
            font-family: 'Alfarn', serif;
            font-size: clamp(1.8rem, 3.5vw, 2.4rem);
            color: var(--color-primary);
            margin-bottom: clamp(1rem, 3vw, 1.75rem);
        }

        .wizard-panel__title {
            font-family: 'Alfarn', serif;
            font-size: clamp(1.5rem, 3vw, 2rem);
            color: var(--color-primary);
            margin: 0;
        }

        .wizard-panel {
            background: #fff;
            border-radius: 1.5rem;
            box-shadow: 0 18px 40px rgba(101, 45, 144, 0.12);
            padding: clamp(1.75rem, 3vw, 2.75rem);
            display: flex;
            flex-direction: column;
            gap: clamp(1.75rem, 3vw, 2.25rem);
        }

        .wizard-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 1.5rem;
            flex-wrap: wrap;
        }

        .wizard-header__intro {
            display: flex;
            flex-direction: column;
            gap: .75rem;
        }

        .wizard-header__meta {
            color: rgba(97, 97, 111, .85);
            font-size: .95rem;
            display: flex;
            flex-wrap: wrap;
            gap: .35rem;
        }

        .wizard-header__meta span {
            display: inline-flex;
            align-items: center;
        }

        .wizard-header__actions {
            display: flex;
            gap: .75rem;
            align-items: center;
        }

        .wizard-badge {
            display: inline-flex;
            align-items: center;
            gap: .35rem;
            padding: .45rem 1rem;
            border-radius: 999px;
            font-size: .8rem;
            letter-spacing: .06em;
            text-transform: uppercase;
            background: rgba(101, 45, 144, 0.08);
            color: var(--color-secondary);
        }

        .wizard-stepper {
            display: grid;
            gap: .75rem;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        }

        .wizard-stepper__item {
            border: 1px solid rgba(101, 45, 144, 0.2);
            border-radius: .9rem;
            padding: .85rem .75rem;
            background: #fff;
            color: var(--color-last);
            text-align: left;
            font-size: .85rem;
            font-weight: 500;
            transition: all .2s ease;
        }

        .wizard-stepper__item.active {
            border-color: var(--color-secondary);
            background: rgba(101, 45, 144, 0.08);
            color: var(--color-secondary);
        }

        .wizard-step {
            display: none;
            animation: fadeIn .35s ease;
        }

        .wizard-step.active {
            display: block;
        }

        .form-grid {
            display: grid;
            gap: clamp(1.25rem, 2.5vw, 1.75rem);
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        }

        .form-card {
            border: 1px solid rgba(101, 45, 144, 0.12);
            border-radius: 1rem;
            padding: 1.25rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .form-card__title {
            display: flex;
            flex-direction: column;
            gap: .35rem;
        }

        .form-card__title span {
            font-size: .8rem;
            letter-spacing: .08em;
            text-transform: uppercase;
            color: rgba(97, 97, 111, .7);
        }

        .participant-grid {
            display: grid;
            gap: clamp(1.25rem, 2vw, 1.75rem);
            grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
        }

        .participant-card {
            border-radius: 1rem;
            border: 1px solid rgba(101, 45, 144, 0.12);
            padding: 1.25rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .participant-card__header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: .75rem;
        }

        .participant-empty {
            border: 1px dashed rgba(101, 45, 144, 0.35);
            border-radius: 1rem;
            padding: 1.25rem;
            display: flex;
            flex-direction: column;
            gap: .85rem;
            align-items: flex-start;
        }

        .wizard-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: .75rem;
            flex-wrap: wrap;
        }

        .wizard-actions__nav {
            display: flex;
            gap: .75rem;
        }

        .wizard-sidecard {
            background: linear-gradient(135deg, rgba(101, 45, 144, 0.95), rgba(255, 129, 0, 0.9));
            border-radius: 1.5rem;
            color: #fff;
            padding: clamp(1.75rem, 3vw, 2.75rem);
            position: relative;
            overflow: hidden;
            width: 100%;
            max-width: 75vw;
        }

        .duplicate-modal .modal-content {
            border: none;
            border-radius: 1.5rem;
            box-shadow: 0 18px 40px rgba(101, 45, 144, 0.2);
            overflow: hidden;
        }

        .duplicate-modal__header {
            background: linear-gradient(135deg, rgba(101, 45, 144, 0.95), rgba(255, 129, 0, 0.9));
            color: #fff;
        }

        .duplicate-modal__intro {
            font-size: .95rem;
            color: rgba(97, 97, 111, .85);
        }

        .duplicate-results {
            display: grid;
            gap: 1.25rem;
            margin-top: 1.5rem;
        }

        .duplicate-card {
            border: 1px solid rgba(101, 45, 144, 0.12);
            border-radius: 1.25rem;
            padding: 1.5rem;
            background: #fff;
            box-shadow: 0 12px 24px rgba(101, 45, 144, 0.08);
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .duplicate-card__header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: .75rem;
        }

        .duplicate-card__badge {
            display: inline-flex;
            align-items: center;
            gap: .35rem;
            padding: .4rem .9rem;
            border-radius: 999px;
            font-size: .78rem;
            text-transform: uppercase;
            letter-spacing: .08em;
            background: rgba(101, 45, 144, 0.1);
            color: var(--color-secondary);
        }

        .duplicate-card__participants {
            display: flex;
            flex-direction: column;
            gap: .35rem;
            font-size: .9rem;
            color: rgba(97, 97, 111, .9);
        }

        .duplicate-card__footer {
            display: flex;
            flex-wrap: wrap;
            gap: .75rem;
            justify-content: flex-end;
        }

        .duplicate-feedback {
            min-height: 1.5rem;
            display: flex;
            align-items: center;
            font-size: .85rem;
        }

        .wizard-sidecard::after {
            content: '';
            position: absolute;
            inset: 0;
            background-image: url('{{ asset('images/login_screens/loginbanner1.png') }}');
            background-size: cover;
            background-position: center;
            mix-blend-mode: soft-light;
            opacity: 0.35;
        }

        .wizard-sidecard__inner {
            position: relative;
            z-index: 2;
            display: flex;
            flex-direction: column;
            gap: 1.75rem;
        }

        .wizard-sidecard__slide {
            display: none;
            flex-direction: column;
            gap: 1rem;
        }

        .wizard-sidecard__slide.active {
            display: flex;
        }

        .wizard-sidecard__title {
            font-family: 'Alfarn', serif;
            font-size: clamp(1.4rem, 3vw, 1.8rem);
        }

        .wizard-tip {
            background: rgba(255, 255, 255, 0.18);
            border-radius: 1rem;
            padding: 1rem 1.25rem;
            font-size: .95rem;
        }

        .deroule-container {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .deroule-header {
            font-size: .78rem;
            letter-spacing: .1em;
            color: rgba(97, 97, 111, .78);
            text-transform: uppercase;
            padding: .75rem 1rem;
            border-radius: .75rem;
            background: rgba(101, 45, 144, 0.08);
            font-weight: 600;
        }

        .deroule-group {
            border: 1px solid rgba(101, 45, 144, 0.12);
            border-radius: 1rem;
            overflow: hidden;
        }

        .deroule-group-header {
            background: rgba(101, 45, 144, 0.08);
            padding: .85rem 1rem;
            font-weight: 600;
        }

        .deroule-group-body {
            display: flex;
            flex-direction: column;
            gap: .75rem;
            padding: 1rem;
        }

        .deroule-row {
            display: grid;
            gap: .75rem;
            grid-template-columns: minmax(120px, 200px) 1fr repeat(2, minmax(110px, 140px)) minmax(140px, 200px);
            align-items: center;
        }

        .deroule-type-badge {
            display: inline-flex;
            align-items: center;
            gap: .35rem;
            border-radius: 999px;
            padding: .45rem .9rem;
            font-size: .85rem;
            background: rgba(101, 45, 144, 0.08);
            color: var(--color-secondary);
            font-weight: 600;
        }

        .wizard-finance-grid {
            display: grid;
            gap: 1rem;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
        }

        .wizard-finance-item {
            border: 1px solid rgba(101, 45, 144, 0.12);
            border-radius: 1rem;
            padding: 1rem 1.1rem;
            display: flex;
            flex-direction: column;
            gap: .35rem;
            text-align: center;
        }

        .wizard-finance-label {
            font-size: .85rem;
            color: rgba(97, 97, 111, .75);
            text-transform: uppercase;
            letter-spacing: .08em;
        }

        .wizard-finance-value {
            font-size: 1.3rem;
            color: var(--color-primary);
            font-weight: 600;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(6px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @media (max-width: 991.98px) {
            .wedding-wizard {
                grid-template-columns: 1fr;
            }

            .wizard-actions {
                flex-direction: column;
                align-items: stretch;
            }

            .wizard-actions__nav {
                justify-content: space-between;
            }

            .deroule-row {
                grid-template-columns: 1fr;
                align-items: stretch;
            }

            .wizard-sidecard {
                justify-self: center;
                margin-inline: auto;
                max-width: clamp(0px, 75vw, 420px);
                width: 100%;
            }
        }

        @media (max-width: 575.98px) {
            .wizard-stepper {
                grid-template-columns: 1fr;
                gap: .5rem;
            }

            .wizard-stepper__item {
                padding: .75rem .5rem;
                font-size: .8rem;
            }
        }
    </style>
{% endblock %}

{% block body %}
<h1 class="wizard-page-title">{{ wedding.id ? 'Modifier le mariage' : 'Ajouter un mariage' }}</h1>
<div class="wedding-wizard">
    <section class="wizard-panel">
        {{ form_start(form, {'attr': {'id': 'weddingForm'}}) }}

        <header class="wizard-header">
            <div class="wizard-header__intro">
                <span class="wizard-badge">
                    <i class="bi bi-stars"></i>
                    {% if wedding.messe is same as(true) %}Messe de mariage{% elseif wedding.messe is same as(false) %}Célébration{% else %}Mariage{% endif %}
                </span>
                <h2 class="wizard-panel__title">{{ wedding.id ? 'Modifier le mariage' : 'Ajouter un mariage' }}</h2>
                <p class="wizard-header__meta mb-0">
                    <span>
                        {% if wedding.marie or wedding.mariee %}
                            {{ wedding.marie ? wedding.marie.fullName : 'Marié à inviter' }} &amp; {{ wedding.mariee ? wedding.mariee.fullName : 'Mariée à inviter' }}
                        {% else %}
                            Identifiez le couple pour personnaliser la collaboration.
                        {% endif %}
                    </span>
                    {% if wedding.date %}
                        <span>&mdash; {{ wedding.date|date('d/m/Y') }}</span>
                    {% endif %}
                    {% if wedding.church %}
                        <span>&mdash; {{ wedding.church }}</span>
                    {% endif %}
                </p>
            </div>
            <div class="wizard-header__actions">
                <button type="submit" class="btn btn-primary btn-rounded btn-icon">
                    Enregistrer
                </button>
                {% if wedding.id %}
                    <button type="button" class="btn btn-outline-primary btn-rounded btn-icon" data-bs-toggle="modal" data-bs-target="#inviteModal">
                        <i class="bi bi-envelope-plus"></i>
                        Inviter
                    </button>
                {% endif %}
                <a href="{{ wedding.id ? path('app_wedding_view', {'id': wedding.id}) : path('app_wedding_index') }}" class="btn btn-outline-secondary btn-rounded">Annuler</a>
            </div>
        </header>

        {{ form_errors(form) }}

        <div class="wizard-stepper" id="weddingStepper">
            <button type="button" class="wizard-stepper__item active" data-step="0">
                Essentiels<br><small>Date &amp; lieu</small>
            </button>
            <button type="button" class="wizard-stepper__item" data-step="1">
                Couple<br><small>Coordonnées</small>
            </button>
            <button type="button" class="wizard-stepper__item" data-step="2">
                Répertoire<br><small>Déroulé &amp; validations</small>
            </button>
            <button type="button" class="wizard-stepper__item" data-step="3">
                Suivi<br><small>Finances &amp; archive</small>
            </button>
        </div>

        <div class="wizard-steps">
            <div class="wizard-step active" data-step="0">
                <div class="form-grid">
                    <div class="form-card">
                        <div class="form-card__title">
                            <span>Calendrier</span>
                            <h3 class="mb-0">Renseignements essentiels</h3>
                        </div>
                        {{ form_row(form.messe, {'label_attr': {'class': 'form-label-sm'}}) }}
                        <div class="row g-3">
                            <div class="col-sm-6">
                                {{ form_row(form.date, {'label_attr': {'class': 'form-label-sm'}}) }}
                            </div>
                            <div class="col-sm-6">
                                {{ form_row(form.time, {'label_attr': {'class': 'form-label-sm'}}) }}
                            </div>
                        </div>
                    </div>
                    <div class="form-card">
                        <div class="form-card__title">
                            <span>Localisation</span>
                            <h3 class="mb-0">Lieu de la célébration</h3>
                        </div>
                        {{ form_row(form.parish, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.church, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.addressLine1, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.addressLine2, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.addressPostalCodeAndCity, {'label_attr': {'class': 'form-label-sm'}}) }}
                    </div>
                </div>
            </div>

            <div class="wizard-step" data-step="1">
                <div class="participant-grid">
                    <div>
                        {% if form.marie is defined %}
                            <div class="participant-card">
                                <div class="participant-card__header">
                                    <h3 class="mb-0">Futur marié</h3>
                                    {% if wedding.marie %}
                                        <span class="badge rounded-pill bg-light text-secondary">{{ wedding.marie.email }}</span>
                                    {% endif %}
                                </div>
                                <div class="row g-3">
                                    <div class="col-sm-6">{{ form_row(form.marie.firstName, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-sm-6">{{ form_row(form.marie.name, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-sm-6">{{ form_row(form.marie.email, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-sm-6">{{ form_row(form.marie.telephone, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-12">{{ form_row(form.marie.addressLine1, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-12">{{ form_row(form.marie.addressLine2, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-12">{{ form_row(form.marie.addressPostalCodeAndCity, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                </div>
                                {{ form_rest(form.marie) }}
                            </div>
                        {% else %}
                            <div class="participant-empty">
                                <h3 class="mb-1">Inviter le futur marié</h3>
                                <p class="mb-0">Associez-le pour qu'il accède au déroulé et aux commentaires.</p>
                                {% if wedding.id %}
                                    <div class="d-flex flex-wrap gap-2">
                                        <button type="button" class="btn btn-outline-light invite-trigger" data-invite-role="marie" data-bs-toggle="modal" data-bs-target="#inviteModal">
                                            <i class="bi bi-envelope-heart"></i> Envoyer une invitation
                                        </button>
                                    </div>
                                {% else %}
                                    <div class="alert alert-light mb-0">Sauvegardez le mariage pour envoyer des invitations.</div>
                                {% endif %}
                            </div>
                        {% endif %}
                    </div>

                    <div>
                        {% if form.mariee is defined %}
                            <div class="participant-card">
                                <div class="participant-card__header">
                                    <h3 class="mb-0">Future mariée</h3>
                                    {% if wedding.mariee %}
                                        <span class="badge rounded-pill bg-light text-secondary">{{ wedding.mariee.email }}</span>
                                    {% endif %}
                                </div>
                                <div class="row g-3">
                                    <div class="col-sm-6">{{ form_row(form.mariee.firstName, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-sm-6">{{ form_row(form.mariee.name, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-sm-6">{{ form_row(form.mariee.email, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-sm-6">{{ form_row(form.mariee.telephone, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-12">{{ form_row(form.mariee.addressLine1, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-12">{{ form_row(form.mariee.addressLine2, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                    <div class="col-12">{{ form_row(form.mariee.addressPostalCodeAndCity, {'label_attr': {'class': 'form-label-sm'}}) }}</div>
                                </div>
                                {{ form_rest(form.mariee) }}
                            </div>
                        {% else %}
                            <div class="participant-empty">
                                <h3 class="mb-1">Inviter la future mariée</h3>
                                <p class="mb-0">Son profil est nécessaire pour partager le déroulé et les documents.</p>
                                {% if wedding.id %}
                                    <div class="d-flex flex-wrap gap-2">
                                        <button type="button" class="btn btn-outline-light invite-trigger" data-invite-role="mariee" data-bs-toggle="modal" data-bs-target="#inviteModal">
                                            <i class="bi bi-envelope-heart"></i> Envoyer une invitation
                                        </button>
                                    </div>
                                {% else %}
                                    <div class="alert alert-light mb-0">Sauvegardez le mariage pour envoyer des invitations.</div>
                                {% endif %}
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>

            <div class="wizard-step" data-step="2">
                <div class="deroule-container">
                    {% set types = songTypes is defined ? songTypes : [] %}
                    {% set groups = {} %}
                    {% for t in types %}
                        {% set label = t.celebrationPeriod is not null ? t.celebrationPeriod.value : 'Autres' %}
                        {% if groups[label] is defined %}
                            {% set groups = groups|merge({ (label): groups[label]|merge([t]) }) %}
                        {% else %}
                            {% set groups = groups|merge({ (label): [t] }) %}
                        {% endif %}
                    {% endfor %}

                    {% set order = ['Accueil','Liturgie de la Parole','Liturgie du Mariage','Liturgie Eucharistique','Envoi','Autres'] %}

                    {% if groups is empty %}
                        <div class="alert alert-light mb-0">Aucun type de chant défini. Ajoute des types dans l'administration.</div>
                    {% else %}
                        <div class="deroule-header d-none d-lg-flex">
                            <div class="deroule-col-type">TYPE</div>
                            <div class="deroule-col-choice">VOTRE CHOIX</div>
                            <div class="deroule-col-check">VALIDATION CÉLÉBRANT</div>
                            <div class="deroule-col-check">VALIDATION MUSICIEN</div>
                            <div class="deroule-col-comments">COMMENTAIRES</div>
                        </div>

                        <div class="deroule-groups">
                            {% for label in order %}
                                {% if groups[label] is defined %}
                                    <div class="deroule-group">
                                        <div class="deroule-group-header">{{ label }}</div>
                                        <div class="deroule-group-body">
                                            {% for type in groups[label] %}
                                                {% set songsForType = availableSongsByType[type.id]|default(type.songs) %}
                                                <div class="deroule-row">
                                                    <div>
                                                        <span class="deroule-type-badge">{{ type.name }}</span>
                                                    </div>
                                                    <div>
                                                        <select name="deroule[{{ label|replace({' ':'_'}) }}][{{ type.id|default(loop.index) }}]" class="form-select deroule-select js-deroule-select" data-placeholder="Rechercher un chant">
                                                            <option value="">Aucun chant sélectionné</option>
                                                            {% if songsForType|length > 0 %}
                                                                {% for song in songsForType %}
                                                                    <option value="{{ song.id }}">{{ song.name ?? (song.title ?? 'Titre inconnu') }}</option>
                                                                {% endfor %}
                                                            {% else %}
                                                                <option disabled>Pas de chants disponibles</option>
                                                            {% endif %}
                                                        </select>
                                                    </div>
                                                    <div>
                                                        <input type="checkbox" name="deroule_valid_celebrant[{{ label|replace({' ':'_'}) }}][{{ type.id|default(loop.index) }}]" class="form-check-input" />
                                                    </div>
                                                    <div>
                                                        <input type="checkbox" name="deroule_valid_musicien[{{ label|replace({' ':'_'}) }}][{{ type.id|default(loop.index) }}]" class="form-check-input" />
                                                    </div>
                                                    <div>
                                                        {% if wedding.id %}
                                                            <button type="button" class="btn btn-sm btn-outline-secondary open-comments" data-wedding="{{ wedding.id }}" data-songtype="{{ type.id }}" aria-haspopup="dialog" aria-controls="commentsModal">
                                                                <i class="bi bi-chat-dots"></i>
                                                                <span class="d-none d-md-inline">Commentaires</span>
                                                            </button>
                                                        {% else %}
                                                            <button type="button" class="btn btn-sm btn-outline-secondary" disabled title="Sauvegardez le mariage pour activer les commentaires">
                                                                <i class="bi bi-chat-dots"></i>
                                                                <span class="d-none d-md-inline">Commentaires</span>
                                                            </button>
                                                        {% endif %}
                                                    </div>
                                                </div>
                                            {% endfor %}
                                        </div>
                                    </div>
                                {% endif %}
                            {% endfor %}
                        </div>
                    {% endif %}
                </div>
                {{ form_widget(form.songs, {'attr': {'class': 'd-none'}}) }}
            </div>

            <div class="wizard-step" data-step="3">
                <div class="form-grid">
                    <div class="form-card">
                        <div class="form-card__title">
                            <span>Finances</span>
                            <h3 class="mb-0">Suivi des montants</h3>
                        </div>
                        <div class="wizard-finance-grid">
                            <div class="wizard-finance-item">
                                <div class="wizard-finance-label">Montant de la prestation</div>
                                <div class="wizard-finance-value">{{ wedding.montantTotal is not null ? (wedding.montantTotal ~ ' €') : '-' }}</div>
                            </div>
                            <div class="wizard-finance-item">
                                <div class="wizard-finance-label">Montant déjà versé</div>
                                <div class="wizard-finance-value">{{ wedding.montantPaye is not null ? (wedding.montantPaye ~ ' €') : '-' }}</div>
                            </div>
                            <div class="wizard-finance-item">
                                <div class="wizard-finance-label">Acompte</div>
                                <div class="wizard-finance-value">
                                    {% if wedding.montantTotal and wedding.montantPaye is not null and wedding.montantTotal > 0 %}
                                        {{ ((wedding.montantPaye / wedding.montantTotal) * 100)|round(0) }} %
                                    {% else %}
                                        -
                                    {% endif %}
                                </div>
                            </div>
                            <div class="wizard-finance-item">
                                <div class="wizard-finance-label">Reste dû</div>
                                <div class="wizard-finance-value">
                                    {% if wedding.montantTotal is not null and wedding.montantPaye is not null %}
                                        {{ (wedding.montantTotal - wedding.montantPaye)|number_format(2, '.', ' ') }} €
                                    {% else %}
                                        -
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        {{ form_row(form.montantTotal, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.montantPaye, {'label_attr': {'class': 'form-label-sm'}}) }}
                    </div>

                    <div class="form-card">
                        <div class="form-card__title">
                            <span>Paroisse</span>
                            <h3 class="mb-0">Contact célébrant</h3>
                        </div>
                        {{ form_row(form.priestFirstName, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.priestLastName, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.priestPhoneNumber, {'label_attr': {'class': 'form-label-sm'}}) }}
                        {{ form_row(form.priestEMail, {'label_attr': {'class': 'form-label-sm'}}) }}
                    </div>

                    <div class="form-card">
                        <div class="form-card__title">
                            <span>Clôture</span>
                            <h3 class="mb-0">Archive &amp; options</h3>
                        </div>
                        {{ form_row(form.archive, {'label_attr': {'class': 'form-check-label'}}) }}
                        <p class="mb-0 small text-muted">Archivez un mariage une fois la célébration passée pour conserver un historique propre.</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="wizard-actions">
            <div class="wizard-actions__nav">
                <button type="button" class="btn btn-outline-secondary wizard-prev d-none" data-action="prev-step">
                    <i class="bi bi-arrow-left"></i>
                    Retour
                </button>
                <button type="button" class="btn btn-primary wizard-next" data-action="next-step">
                    Continuer
                    <i class="bi bi-arrow-right ms-2"></i>
                </button>
            </div>
            <button type="submit" class="btn btn-success wizard-submit d-none" data-action="submit-step">
                <i class="bi bi-check-circle"></i>
                Valider le mariage
            </button>
        </div>

        {{ form_rest(form) }}
        {{ form_end(form, {'render_rest': false}) }}
    </section>

    <aside class="wizard-sidecard">
        <div class="wizard-sidecard__inner" id="wizardSideContent">
            <div class="wizard-sidecard__slide active" data-step="0">
                <span class="wizard-badge"><i class="bi bi-geo-alt"></i> Étape 1</span>
                <h2 class="wizard-sidecard__title">Cadrez la célébration</h2>
                <p class="mb-0">Précisez le format, la date et le lieu pour déclencher les rappels automatiques auprès des partenaires.</p>
                <div class="wizard-tip"><i class="bi bi-lightbulb me-2"></i>Plus les informations sont complètes, plus le calendrier partagé est pertinent.</div>
            </div>
            <div class="wizard-sidecard__slide" data-step="1">
                <span class="wizard-badge"><i class="bi bi-people"></i> Étape 2</span>
                <h2 class="wizard-sidecard__title">Pilotez le couple</h2>
                <p class="mb-0">Actualisez les coordonnées des mariés sans quitter le parcours. Invitez-les instantanément s’ils ne sont pas encore connectés.</p>
                <div class="wizard-tip"><i class="bi bi-envelope-heart me-2"></i>Les invitations envoyées depuis ici héritent automatiquement des crédits disponibles.</div>
            </div>
            <div class="wizard-sidecard__slide" data-step="2">
                <span class="wizard-badge"><i class="bi bi-music-note-beamed"></i> Étape 3</span>
                <h2 class="wizard-sidecard__title">Construisez le déroulé</h2>
                <p class="mb-0">Associez des chants à chaque moment clé et suivez les validations du célébrant et des musiciens en direct.</p>
                <div class="wizard-tip"><i class="bi bi-chat-dots me-2"></i>Les commentaires contextualisés restent accessibles depuis chaque type de chant.</div>
            </div>
            <div class="wizard-sidecard__slide" data-step="3">
                <span class="wizard-badge"><i class="bi bi-coin"></i> Étape 4</span>
                <h2 class="wizard-sidecard__title">Clôturez le dossier</h2>
                <p class="mb-0">Suivez les montants versés, archivez si nécessaire et centralisez le contact avec la paroisse.</p>
                <div class="wizard-tip"><i class="bi bi-clipboard-check me-2"></i>Pensez à archiver le mariage une fois la célébration passée pour conserver un historique propre.</div>
            </div>
        </div>
    </aside>
</div>

<div class="modal fade duplicate-modal" id="duplicateCheckModal" tabindex="-1" aria-hidden="true" data-autoshow="{{ wedding.id ? '0' : '1' }}">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header duplicate-modal__header">
                <h5 class="modal-title text-white">Vérifier les mariages existants</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fermer"></button>
            </div>
            <div class="modal-body">
                <p class="duplicate-modal__intro mb-4">
                    Pour éviter la création de doublons, indiquez les adresses e-mail des deux mariés. Nous vous proposerons les mariages déjà associés à ces contacts.
                </p>
                <form id="duplicateCheckForm" class="duplicate-form" data-check-url="{{ path('app_wedding_check_duplicates') }}" data-request-url-template="{{ path('app_wedding_request_access', {'id': 999999}) }}">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="duplicate-email-marie" class="form-label">Email du futur marié</label>
                            <input type="email" class="form-control" id="duplicate-email-marie" name="email_marie" placeholder="nom@exemple.fr" required>
                        </div>
                        <div class="col-md-6">
                            <label for="duplicate-email-mariee" class="form-label">Email de la future mariée</label>
                            <input type="email" class="form-control" id="duplicate-email-mariee" name="email_mariee" placeholder="prenom@exemple.fr" required>
                        </div>
                        <div class="col-12">
                            <label for="duplicate-message" class="form-label">Message pour les mariés (facultatif)</label>
                            <textarea class="form-control" id="duplicate-message" name="request_message" rows="3" placeholder="Expliquez votre demande ou précisez votre rôle."></textarea>
                        </div>
                    </div>
                    <div class="d-flex flex-column flex-md-row gap-3 align-items-md-center justify-content-between mt-4">
                        <div id="duplicateFeedback" class="duplicate-feedback text-muted"></div>
                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-search"></i>
                                Rechercher des mariages
                            </button>
                            <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                                Continuer sans doublon
                            </button>
                        </div>
                    </div>
                </form>
                <div id="duplicateResults" class="duplicate-results"></div>
            </div>
        </div>
    </div>
</div>

{% if wedding.id %}
    <div class="modal fade" id="inviteModal" tabindex="-1" aria-labelledby="inviteModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="inviteModalLabel">Inviter quelqu'un</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                </div>
                <form action="{{ path('app_wedding_invite', {'id': wedding.id}) }}" method="POST">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email" required>
                        </div>
                        <div class="mb-3">
                            <label for="role" class="form-label">Rôle</label>
                            <select class="form-select" id="role" name="role" required>
                                <option value="paroisse">Paroisse</option>
                                <option value="musicien">Musicien</option>
                                <option value="marie">Marié</option>
                                <option value="mariee">Mariée</option>
                            </select>
                        </div>
                    </div>
                    {% if generatedInvitationLink is defined %}
                        <div class="alert alert-info mt-3 mx-3">
                            <p class="mb-2">Lien d'invitation généré :</p>
                            <div class="input-group">
                                <input type="text" class="form-control" id="invitation-link" value="{{ generatedInvitationLink }}" readonly>
                                <button type="button" class="btn btn-outline-secondary" onclick="window.copyInvitationLink()">Copier</button>
                            </div>
                        </div>
                    {% endif %}
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                        <button type="submit" class="btn btn-primary">Envoyer l'invitation</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endif %}

<div class="modal fade" id="commentsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Commentaires</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
            </div>
            <div class="modal-body">
                <div class="text-center py-4" id="commentsModalSpinner">
                    <div class="spinner-border text-secondary" role="status"><span class="visually-hidden">Chargement...</span></div>
                </div>
            </div>
            <div class="modal-footer"></div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        window.copyInvitationLink = function () {
            const copyText = document.getElementById('invitation-link');
            if (!copyText) {
                return;
            }
            copyText.select();
            copyText.setSelectionRange(0, 99999);
            navigator.clipboard.writeText(copyText.value).then(function () {
                alert('Lien copié dans le presse-papiers !');
            });
        };

        document.addEventListener('DOMContentLoaded', function () {
            const duplicateModalEl = document.getElementById('duplicateCheckModal');
            if (duplicateModalEl && typeof bootstrap !== 'undefined') {
                const autoshow = duplicateModalEl.dataset.autoshow === '1';
                const duplicateModal = new bootstrap.Modal(duplicateModalEl, {
                    backdrop: 'static',
                    keyboard: false,
                });
                const duplicateForm = duplicateModalEl.querySelector('#duplicateCheckForm');
                const feedbackEl = duplicateModalEl.querySelector('#duplicateFeedback');
                const resultsContainer = duplicateModalEl.querySelector('#duplicateResults');
                const messageInput = duplicateModalEl.querySelector('#duplicate-message');
                const submitBtn = duplicateForm?.querySelector('button[type="submit"]');
                const checkUrl = duplicateForm?.dataset.checkUrl || '';
                const requestTemplate = duplicateForm?.dataset.requestUrlTemplate || '';
                let lastEmails = [];

                const setFeedback = (text, tone = 'muted') => {
                    if (!feedbackEl) {
                        return;
                    }
                    feedbackEl.textContent = text;
                    feedbackEl.className = `duplicate-feedback text-${tone}`;
                };

                const buildRequestUrl = (id) => {
                    if (!requestTemplate) {
                        return `/mariages/${id}/request-access`;
                    }
                    if (requestTemplate.includes('999999')) {
                        return requestTemplate.replace('999999', String(id));
                    }
                    return requestTemplate.replace(/\d+/, String(id));
                };

                const renderParticipants = (list) => {
                    if (!Array.isArray(list) || list.length === 0) {
                        return '<span class="text-muted">Aucun participant renseigné.</span>';
                    }
                    return list
                        .map((item) => `<span><i class="bi bi-person-fill me-2 text-secondary"></i>${item}</span>`)
                        .join('');
                };

                const renderResults = (weddings) => {
                    resultsContainer.innerHTML = '';

                    if (!Array.isArray(weddings) || weddings.length === 0) {
                        setFeedback('Aucun mariage correspondant n’a été trouvé.', 'warning');
                        return;
                    }

                    const fragment = document.createDocumentFragment();

                    weddings.forEach((wedding) => {
                        const card = document.createElement('article');
                        card.className = 'duplicate-card';
                        card.innerHTML = `
                            <div class="duplicate-card__header">
                                <span class="duplicate-card__badge"><i class="bi bi-stars"></i> Potentiel doublon</span>
                                <span class="text-muted small">${wedding.date ?? 'Date inconnue'}</span>
                            </div>
                            <h3 class="h5 mb-1">${wedding.title}</h3>
                            <p class="mb-0 text-muted">${wedding.church ?? 'Lieu non renseigné'}</p>
                            <div class="duplicate-card__participants">
                                ${renderParticipants(wedding.participants)}
                            </div>
                            <div class="duplicate-card__footer">
                                <a class="btn btn-light btn-sm" href="${wedding.viewUrl}" target="_blank" rel="noopener">
                                    <i class="bi bi-box-arrow-up-right"></i>
                                    Ouvrir
                                </a>
                                <button type="button" class="btn btn-outline-primary btn-sm duplicate-request" data-wedding-id="${wedding.id}">
                                    <i class="bi bi-envelope"></i>
                                    Demander l’ajout
                                </button>
                            </div>
                        `;
                        fragment.appendChild(card);
                    });

                    resultsContainer.appendChild(fragment);
                    setFeedback('Sélectionnez un mariage existant pour envoyer votre demande.', 'success');
                };

                if (duplicateForm && checkUrl) {
                    duplicateForm.addEventListener('submit', async (event) => {
                        event.preventDefault();
                        const formData = new FormData(duplicateForm);
                        const emailMarie = (formData.get('email_marie') || '').toString().trim();
                        const emailMariee = (formData.get('email_mariee') || '').toString().trim();

                        if (!emailMarie || !emailMariee) {
                            setFeedback('Veuillez renseigner les deux adresses e-mail.', 'danger');
                            return;
                        }

                        lastEmails = [emailMarie, emailMariee];
                        setFeedback('Recherche en cours...', 'info');
                        resultsContainer.innerHTML = '';
                        if (submitBtn) {
                            submitBtn.disabled = true;
                        }

                        try {
                            const response = await fetch(checkUrl, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest',
                                },
                                body: JSON.stringify({
                                    email_marie: emailMarie,
                                    email_mariee: emailMariee,
                                }),
                            });

                            const payload = await response.json();

                            if (!response.ok) {
                                setFeedback(payload.message || 'La recherche a échoué.', 'danger');
                                return;
                            }

                            renderResults(payload.weddings || []);
                            if (payload.message) {
                                setFeedback(payload.message, (payload.weddings || []).length ? 'success' : 'warning');
                            }
                        } catch (error) {
                            console.error(error);
                            setFeedback('Une erreur est survenue lors de la recherche.', 'danger');
                        } finally {
                            if (submitBtn) {
                                submitBtn.disabled = false;
                            }
                        }
                    });
                }

                if (resultsContainer) {
                    resultsContainer.addEventListener('click', async (event) => {
                        const trigger = event.target.closest('.duplicate-request');
                        if (!trigger) {
                            return;
                        }

                        const weddingId = trigger.getAttribute('data-wedding-id');
                        if (!weddingId) {
                            return;
                        }

                        trigger.disabled = true;
                        trigger.classList.add('disabled');

                        try {
                            const response = await fetch(buildRequestUrl(weddingId), {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest',
                                },
                                body: JSON.stringify({
                                    message: messageInput ? messageInput.value : '',
                                    emails: lastEmails,
                                }),
                            });

                            const payload = await response.json();
                            if (!response.ok) {
                                setFeedback(payload.message || 'Impossible d’envoyer la demande.', 'danger');
                                trigger.disabled = false;
                                trigger.classList.remove('disabled');
                                return;
                            }

                            setFeedback(payload.message || 'Demande envoyée.', 'success');
                            trigger.innerHTML = '<i class="bi bi-check-lg"></i> Demande envoyée';
                            trigger.classList.replace('btn-outline-primary', 'btn-success');
                        } catch (error) {
                            console.error(error);
                            setFeedback('Une erreur est survenue lors de l’envoi de la demande.', 'danger');
                            trigger.disabled = false;
                            trigger.classList.remove('disabled');
                        }
                    });
                }

                if (autoshow) {
                    duplicateModal.show();
                }
            }

            const steps = Array.from(document.querySelectorAll('.wizard-step'));
            const stepperItems = Array.from(document.querySelectorAll('.wizard-stepper__item'));
            const sideSlides = Array.from(document.querySelectorAll('.wizard-sidecard__slide'));
            const prevBtn = document.querySelector('.wizard-prev');
            const nextBtn = document.querySelector('.wizard-next');
            const submitBtn = document.querySelector('.wizard-submit');
            let currentStep = 0;

            function syncUI() {
                steps.forEach((step, index) => step.classList.toggle('active', index === currentStep));
                stepperItems.forEach((item, index) => item.classList.toggle('active', index === currentStep));
                sideSlides.forEach((slide, index) => slide.classList.toggle('active', index === currentStep));
                if (prevBtn) {
                    prevBtn.classList.toggle('d-none', currentStep === 0);
                }
                if (nextBtn) {
                    nextBtn.classList.toggle('d-none', currentStep >= steps.length - 1);
                }
                if (submitBtn) {
                    submitBtn.classList.toggle('d-none', currentStep < steps.length - 1);
                }
            }

            if (prevBtn) {
                prevBtn.addEventListener('click', function () {
                    if (currentStep > 0) {
                        currentStep -= 1;
                        syncUI();
                    }
                });
            }

            if (nextBtn) {
                nextBtn.addEventListener('click', function () {
                    if (currentStep < steps.length - 1) {
                        currentStep += 1;
                        syncUI();
                    }
                });
            }

            stepperItems.forEach((item) => {
                item.addEventListener('click', function () {
                    const target = parseInt(item.dataset.step, 10);
                    if (!Number.isNaN(target)) {
                        currentStep = target;
                        syncUI();
                    }
                });
            });

            syncUI();

            if (window.TomSelect) {
                document.querySelectorAll('.js-deroule-select').forEach((select) => {
                    if (!select.tomselect) {
                        new TomSelect(select, {
                            placeholder: select.dataset.placeholder || 'Rechercher un chant',
                            allowEmptyOption: true,
                            create: false,
                            maxOptions: 500,
                        });
                    }
                });
            }

            document.querySelectorAll('.invite-trigger').forEach((btn) => {
                btn.addEventListener('click', function () {
                    const roleInput = document.getElementById('role');
                    if (roleInput) {
                        roleInput.value = btn.getAttribute('data-invite-role') || '';
                    }
                });
            });

            const modalEl = document.getElementById('commentsModal');
            if (modalEl) {
                const bsModal = new bootstrap.Modal(modalEl);
                document.querySelectorAll('.open-comments').forEach((btn) => {
                    btn.addEventListener('click', async function () {
                        const weddingId = this.dataset.wedding;
                        const songTypeId = this.dataset.songtype;
                        const url = `/comments/${weddingId}/${songTypeId}`;

                        const body = modalEl.querySelector('.modal-body');
                        const footer = modalEl.querySelector('.modal-footer');
                        body.innerHTML = '<div class="text-center py-4"><div class="spinner-border text-secondary" role="status"><span class="visually-hidden">Chargement...</span></div></div>';
                        footer.innerHTML = '';
                        bsModal.show();

                        try {
                            const res = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                            const text = await res.text();
                            const parser = new DOMParser();
                            const doc = parser.parseFromString(text, 'text/html');

                            const header = doc.querySelector('h2');
                            const commentsBox = doc.querySelector('#comments-box');
                            const form = doc.querySelector('.card-footer form') || doc.querySelector('form');

                            body.innerHTML = '';
                            if (header) {
                                body.appendChild(header.cloneNode(true));
                            }
                            if (commentsBox) {
                                body.appendChild(commentsBox.cloneNode(true));
                            } else {
                                body.innerHTML += '<p class="text-muted">Aucun commentaire.</p>';
                            }

                            footer.innerHTML = '';
                            if (form) {
                                const injectedForm = form.cloneNode(true);
                                footer.appendChild(injectedForm);

                                injectedForm.addEventListener('submit', async function (evt) {
                                    evt.preventDefault();
                                    const fd = new FormData(injectedForm);
                                    const action = injectedForm.getAttribute('action') || url;
                                    const method = (injectedForm.getAttribute('method') || 'POST').toUpperCase();

                                    try {
                                        const response = await fetch(action, {
                                            method: method,
                                            body: fd,
                                            headers: { 'X-Requested-With': 'XMLHttpRequest' },
                                        });
                                        if (!response.ok) {
                                            throw new Error('Requête invalide');
                                        }

                                        const refreshed = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                                        const refreshedText = await refreshed.text();
                                        const refreshedDoc = new DOMParser().parseFromString(refreshedText, 'text/html');
                                        const newComments = refreshedDoc.querySelector('#comments-box');
                                        const newForm = refreshedDoc.querySelector('.card-footer form') || refreshedDoc.querySelector('form');

                                        body.querySelector('h2')?.remove();
                                        if (newComments) {
                                            const old = body.querySelector('#comments-box');
                                            if (old) {
                                                old.replaceWith(newComments.cloneNode(true));
                                            } else {
                                                body.appendChild(newComments.cloneNode(true));
                                            }
                                        }

                                        if (newForm) {
                                            footer.innerHTML = '';
                                            footer.appendChild(newForm.cloneNode(true));
                                        }
                                    } catch (err) {
                                        console.error(err);
                                        alert('Erreur lors de l\'envoi du commentaire.');
                                    }
                                });
                            } else {
                                footer.innerHTML = '<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>';
                            }
                        } catch (err) {
                            console.error(err);
                            const bodyEl = modalEl.querySelector('.modal-body');
                            bodyEl.innerHTML = '<p class="text-danger">Impossible de charger les commentaires.</p>';
                            modalEl.querySelector('.modal-footer').innerHTML = '<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>';
                        }
                    });
                });
            }
        });
    </script>
{% endblock %}