{% extends 'base.html.twig' %}

{% block title %}{{ user.id ? 'Modifier l\'utilisateur' : 'Ajouter un nouvel utilisateur' }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.css">
    <style>
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .app-actions {
            display: flex;
            gap: 0.75rem;
            flex-wrap: wrap;
        }
        
        .app-card {
            background: white;
            border-radius: 0.5rem;
            padding: 1.5rem;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
        }

        .profile-picture-preview {
            max-width: 200px;
            margin-top: 1rem;
            border-radius: 0.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        /* Styles pour le modal de recadrage */
        .crop-modal {
            display: none;
            position: fixed;
            z-index: 9999;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.85);
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease;
        }

        .crop-modal.active {
            display: flex;
        }

        .crop-container {
            background: white;
            padding: 2rem;
            border-radius: 1rem;
            max-width: 800px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
        }

        .crop-image-container {
            max-height: 500px;
            margin: 1.5rem 0;
        }

        .crop-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 1.5rem;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* Cacher l'input file par défaut */
        input[type="file"].form-control {
            display: none;
        }

        .custom-file-upload {
            display: inline-block;
            padding: 0.5rem 1.5rem;
            cursor: pointer;
            background: linear-gradient(135deg, var(--color-primary), var(--color-secondary));
            color: white;
            border-radius: 0.5rem;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(255, 129, 0, 0.3);
        }

        .custom-file-upload:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(255, 129, 0, 0.4);
        }

        .custom-file-upload i {
            margin-right: 0.5rem;
        }
    </style>
{% endblock %}

{% block body %}
<header class="page-header">
    <h1>{{ user.id ? 'Modifier l\'utilisateur' : 'Ajouter un utilisateur' }}</h1>
    <div class="app-actions">
        <button type="submit" form="userForm" class="btn btn-primary btn-rounded btn-icon">
            <i class="bi bi-check-lg"></i>
            Enregistrer
        </button>
        <a href="{{ path('app_user_index') }}" class="btn btn-outline-secondary btn-rounded">Annuler</a>
    </div>
</header>

{{ form_start(form, {'attr': {'id': 'userForm'}}) }}

<div class="row g-4">
    <!-- Photo de profil -->
    <div class="col-12">
        <div class="app-card">
            <h2 class="h5 mb-4" style="color: var(--color-secondary); font-weight: 600;">
                <i class="bi bi-person-circle me-2"></i>Photo de profil
            </h2>

            <div class="form-group">
                {{ form_label(form.profilePictureFile, 'Photo de profil', {'label_attr': {'class': 'form-label fw-bold'}}) }}
                
                {% if user.profilePictureName %}
                    <div class="mb-3">
                        <img src="{{ vich_uploader_asset(user, 'profilePictureFile') }}" 
                             alt="Photo de profil de {{ user.fullName }}" 
                             class="img-fluid profile-picture-preview">
                    </div>
                {% endif %}
                
                {{ form_widget(form.profilePictureFile) }}
                {{ form_errors(form.profilePictureFile) }}
                <small class="form-text text-muted">Formats acceptés : JPG, PNG, GIF (max 2 Mo)</small>
            </div>
        </div>
    </div>

    <!-- Informations personnelles -->
    <div class="col-12 col-lg-6">
        <div class="app-card">
            <h2 class="h5 mb-4" style="color: var(--color-secondary); font-weight: 600;">
                <i class="bi bi-person-fill me-2"></i>Informations personnelles
            </h2>

            <div class="row g-3">
                <div class="col-12 col-md-6">
                    <div class="form-group">
                        {{ form_label(form.firstName, 'Prénom', {'label_attr': {'class': 'form-label fw-bold'}}) }}
                        {{ form_widget(form.firstName, {'attr': {'class': 'form-control', 'placeholder': 'Prénom'}}) }}
                        {{ form_errors(form.firstName) }}
                    </div>
                </div>

                <div class="col-12 col-md-6">
                    <div class="form-group">
                        {{ form_label(form.name, 'Nom', {'label_attr': {'class': 'form-label fw-bold'}}) }}
                        {{ form_widget(form.name, {'attr': {'class': 'form-control', 'placeholder': 'Nom'}}) }}
                        {{ form_errors(form.name) }}
                    </div>
                </div>

                <div class="col-12">
                    <div class="form-group">
                        {{ form_label(form.email, 'Email', {'label_attr': {'class': 'form-label fw-bold'}}) }}
                        {{ form_widget(form.email, {'attr': {'class': 'form-control', 'placeholder': 'email@exemple.fr'}}) }}
                        {{ form_errors(form.email) }}
                    </div>
                </div>

                <div class="col-12">
                    <div class="form-group">
                        {{ form_label(form.telephone, 'Téléphone', {'label_attr': {'class': 'form-label fw-bold'}}) }}
                        {{ form_widget(form.telephone, {'attr': {'class': 'form-control', 'placeholder': '+33 6 12 34 56 78'}}) }}
                        {{ form_errors(form.telephone) }}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Adresse -->
    <div class="col-12 col-lg-6">
        <div class="app-card">
            <h2 class="h5 mb-4" style="color: var(--color-secondary); font-weight: 600;">
                <i class="bi bi-geo-alt-fill me-2"></i>Adresse
            </h2>

            <div class="row g-3">
                <div class="col-12">
                    <div class="form-group">
                        {{ form_label(form.addressLine1, 'Ligne 1', {'label_attr': {'class': 'form-label fw-bold'}}) }}
                        {{ form_widget(form.addressLine1, {'attr': {'class': 'form-control', 'placeholder': 'Numéro et rue'}}) }}
                        {{ form_errors(form.addressLine1) }}
                    </div>
                </div>

                <div class="col-12">
                    <div class="form-group">
                        {{ form_label(form.addressLine2, 'Ligne 2 (optionnel)', {'label_attr': {'class': 'form-label fw-bold'}}) }}
                        {{ form_widget(form.addressLine2, {'attr': {'class': 'form-control', 'placeholder': 'Complément d\'adresse'}}) }}
                        {{ form_errors(form.addressLine2) }}
                    </div>
                </div>

                <div class="col-12">
                    <div class="form-group">
                        {{ form_label(form.addressPostalCodeAndCity, 'Code postal et ville', {'label_attr': {'class': 'form-label fw-bold'}}) }}
                        {{ form_widget(form.addressPostalCodeAndCity, {'attr': {'class': 'form-control', 'placeholder': '75001 Paris'}}) }}
                        {{ form_errors(form.addressPostalCodeAndCity) }}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Accès et sécurité -->
    <div class="col-12">
        <div class="app-card">
            <h2 class="h5 mb-4" style="color: var(--color-secondary); font-weight: 600;">
                <i class="bi bi-shield-lock-fill me-2"></i>Accès et sécurité
            </h2>

            <div class="row g-3">
                <div class="col-12 col-md-6">
                    <div class="form-group">
                        {{ form_label(form.roles, 'Rôle', {'label_attr': {'class': 'form-label fw-bold'}}) }}
                        {{ form_widget(form.roles, {'attr': {'class': 'form-select'}}) }}
                        {{ form_errors(form.roles) }}
                        <small class="form-text text-muted">Définit les permissions de l'utilisateur dans l'application.</small>
                    </div>
                </div>

                <div class="col-12 col-md-6">
                    <div class="form-group">
                        {{ form_label(form.password, user.id ? 'Nouveau mot de passe (laisser vide pour ne pas changer)' : 'Mot de passe', {'label_attr': {'class': 'form-label fw-bold'}}) }}
                        {{ form_widget(form.password, {'attr': {'class': 'form-control', 'placeholder': '••••••••'}}) }}
                        {{ form_help(form.password) }}
                        {{ form_errors(form.password) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{{ form_end(form) }}

<!-- Modal de recadrage de photo -->
<div id="cropModal" class="crop-modal">
    <div class="crop-container">
        <h3 style="color: var(--color-secondary); margin-bottom: 1rem;">
            <i class="bi bi-crop me-2"></i>Recadrer la photo
        </h3>
        <p style="color: var(--color-last); margin-bottom: 1rem;">
            Ajustez le cadrage de la photo de profil. Vous pouvez zoomer et déplacer l'image.
        </p>
        <div class="crop-image-container">
            <img id="cropImage" src="" alt="Image à recadrer" style="max-width: 100%; display: block;">
        </div>
        <div class="crop-actions">
            <button type="button" class="btn btn-outline-secondary" id="cancelCrop">
                <i class="bi bi-x-lg me-1"></i>Annuler
            </button>
            <button type="button" class="btn btn-primary" id="applyCrop">
                <i class="bi bi-check-lg me-1"></i>Appliquer
            </button>
        </div>
    </div>
</div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.1/cropper.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let cropper = null;
            const fileInput = document.getElementById('user_profilePictureFile_file');
            const cropModal = document.getElementById('cropModal');
            const cropImage = document.getElementById('cropImage');
            const cancelCropBtn = document.getElementById('cancelCrop');
            const applyCropBtn = document.getElementById('applyCrop');
            
            // Créer un bouton personnalisé
            const customButton = document.createElement('label');
            customButton.className = 'custom-file-upload';
            customButton.innerHTML = '<i class="bi bi-camera-fill"></i>Choisir une photo';
            customButton.htmlFor = 'user_profilePictureFile_file';
            
            if (fileInput && fileInput.parentNode) {
                fileInput.parentNode.insertBefore(customButton, fileInput.nextSibling);
            }

            if (fileInput) {
                fileInput.addEventListener('change', function(e) {
                    const file = e.target.files[0];
                    
                    if (file) {
                        if (!file.type.match('image.*')) {
                            alert('Veuillez sélectionner une image (JPG, PNG, GIF)');
                            fileInput.value = '';
                            return;
                        }

                        if (file.size > 10 * 1024 * 1024) {
                            alert('La taille de l\'image ne doit pas dépasser 10 Mo');
                            fileInput.value = '';
                            return;
                        }

                        const reader = new FileReader();
                        reader.onload = function(event) {
                            cropImage.src = event.target.result;
                            cropModal.classList.add('active');
                            
                            if (cropper) {
                                cropper.destroy();
                            }
                            
                            cropper = new Cropper(cropImage, {
                                aspectRatio: 1,
                                viewMode: 1,
                                dragMode: 'move',
                                autoCropArea: 0.8,
                                restore: false,
                                guides: true,
                                center: true,
                                highlight: false,
                                cropBoxMovable: true,
                                cropBoxResizable: true,
                                toggleDragModeOnDblclick: false,
                            });
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }

            cancelCropBtn.addEventListener('click', function() {
                cropModal.classList.remove('active');
                fileInput.value = '';
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
            });

            applyCropBtn.addEventListener('click', function() {
                if (!cropper) return;

                const canvas = cropper.getCroppedCanvas({
                    maxWidth: 1200,
                    maxHeight: 1200,
                    fillColor: '#fff',
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high',
                });

                canvas.toBlob(function(blob) {
                    const fileName = fileInput.files[0].name;
                    const compressedFile = new File([blob], fileName, {
                        type: 'image/jpeg',
                        lastModified: Date.now(),
                    });

                    const dataTransfer = new DataTransfer();
                    dataTransfer.items.add(compressedFile);
                    fileInput.files = dataTransfer.files;

                    const preview = document.querySelector('.profile-picture-preview');
                    if (preview) {
                        preview.src = canvas.toDataURL('image/jpeg');
                    }

                    cropModal.classList.remove('active');
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                    }

                    const successMessage = document.createElement('div');
                    successMessage.className = 'alert alert-success mt-2';
                    successMessage.innerHTML = '<i class="bi bi-check-circle me-2"></i>Photo recadrée et compressée avec succès !';
                    fileInput.parentNode.appendChild(successMessage);
                    setTimeout(() => successMessage.remove(), 3000);
                }, 'image/jpeg', 0.85);
            });

            cropModal.addEventListener('click', function(e) {
                if (e.target === cropModal) {
                    cancelCropBtn.click();
                }
            });
        });
    </script>
{% endblock %}
